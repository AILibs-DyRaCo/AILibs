

##########################
### AdaBoostClassifier ###
##########################

sl_AdaBoostClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.AdaBoostClassifier',p)	->	sl-AdaBoostClassifier-set-algorithm(c,p)	->	sl-AdaBoostClassifier-set-learning_rate(c,p)	->	sl-AdaBoostClassifier-set-n_estimators(c,p)

### Options Predicates for AdaBoostClassifier ###

sl-AdaBoostClassifier-set-algorithm;		sl-AdaBoostClassifier-set-algorithm(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-algorithm;		sl-AdaBoostClassifier-set-algorithm(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_algorithm(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-AdaBoostClassifier-set-learning_rate;		sl-AdaBoostClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-learning_rate;		sl-AdaBoostClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_learning_rate(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-AdaBoostClassifier-set-n_estimators;		sl-AdaBoostClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-n_estimators;		sl-AdaBoostClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)


#########################
### BaggingClassifier ###
#########################

sl_BaggingClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.BaggingClassifier',p)	->	sl-BaggingClassifier-set-bootstrap(c,p)	->	sl-BaggingClassifier-set-bootstrap_features(c,p)	->	sl-BaggingClassifier-set-max_features(c,p)	->	sl-BaggingClassifier-set-max_samples(c,p)	->	sl-BaggingClassifier-set-n_estimators(c,p)	->	sl-BaggingClassifier-set-n_jobs(c,p)	->	sl-BaggingClassifier-set-oob_score(c,p)	->	sl-BaggingClassifier-set-verbose(c,p)	->	sl-BaggingClassifier-set-warm_start(c,p)

### Options Predicates for BaggingClassifier ###

sl-BaggingClassifier-set-bootstrap;		sl-BaggingClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-bootstrap;		sl-BaggingClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_BaggingClassifier_bootstrap(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-BaggingClassifier-set-bootstrap_features;		sl-BaggingClassifier-set-bootstrap_features(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-bootstrap_features;		sl-BaggingClassifier-set-bootstrap_features(c,p); c,p,t; ; OptionsFor_BaggingClassifier_bootstrap_features(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-bootstrap_features', t)
sl-BaggingClassifier-set-max_features;		sl-BaggingClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-max_features;		sl-BaggingClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_BaggingClassifier_max_features(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-BaggingClassifier-set-max_samples;		sl-BaggingClassifier-set-max_samples(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-max_samples;		sl-BaggingClassifier-set-max_samples(c,p); c,p,t; ; OptionsFor_BaggingClassifier_max_samples(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_samples', t)
sl-BaggingClassifier-set-n_estimators;		sl-BaggingClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-n_estimators;		sl-BaggingClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_BaggingClassifier_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-BaggingClassifier-set-n_jobs;		sl-BaggingClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-n_jobs;		sl-BaggingClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_BaggingClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-BaggingClassifier-set-oob_score;		sl-BaggingClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-oob_score;		sl-BaggingClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_BaggingClassifier_oob_score(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-BaggingClassifier-set-verbose;		sl-BaggingClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-verbose;		sl-BaggingClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_BaggingClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-BaggingClassifier-set-warm_start;		sl-BaggingClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-warm_start;		sl-BaggingClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_BaggingClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


###############################
### BayesianGaussianMixture ###
###############################

sl_BayesianGaussianMixture;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.mixture.BayesianGaussianMixture',p)	->	sl-BayesianGaussianMixture-set-covariance_type(c,p)	->	sl-BayesianGaussianMixture-set-init_params(c,p)	->	sl-BayesianGaussianMixture-set-max_iter(c,p)	->	sl-BayesianGaussianMixture-set-n_components(c,p)	->	sl-BayesianGaussianMixture-set-n_init(c,p)	->	sl-BayesianGaussianMixture-set-reg_covar(c,p)	->	sl-BayesianGaussianMixture-set-tol(c,p)	->	sl-BayesianGaussianMixture-set-verbose(c,p)	->	sl-BayesianGaussianMixture-set-verbose_interval(c,p)	->	sl-BayesianGaussianMixture-set-warm_start(c,p)	->	sl-BayesianGaussianMixture-set-weight_concentration_prior_type(c,p)

### Options Predicates for BayesianGaussianMixture ###

sl-BayesianGaussianMixture-set-covariance_type;		sl-BayesianGaussianMixture-set-covariance_type(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-covariance_type;		sl-BayesianGaussianMixture-set-covariance_type(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_covariance_type(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-covariance_type', t)
sl-BayesianGaussianMixture-set-init_params;		sl-BayesianGaussianMixture-set-init_params(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-init_params;		sl-BayesianGaussianMixture-set-init_params(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_init_params(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-init_params', t)
sl-BayesianGaussianMixture-set-max_iter;		sl-BayesianGaussianMixture-set-max_iter(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-max_iter;		sl-BayesianGaussianMixture-set-max_iter(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-BayesianGaussianMixture-set-n_components;		sl-BayesianGaussianMixture-set-n_components(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-n_components;		sl-BayesianGaussianMixture-set-n_components(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_n_components(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-BayesianGaussianMixture-set-n_init;		sl-BayesianGaussianMixture-set-n_init(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-n_init;		sl-BayesianGaussianMixture-set-n_init(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_n_init(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_init', t)
sl-BayesianGaussianMixture-set-reg_covar;		sl-BayesianGaussianMixture-set-reg_covar(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-reg_covar;		sl-BayesianGaussianMixture-set-reg_covar(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_reg_covar(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-reg_covar', t)
sl-BayesianGaussianMixture-set-tol;		sl-BayesianGaussianMixture-set-tol(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-tol;		sl-BayesianGaussianMixture-set-tol(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-BayesianGaussianMixture-set-verbose;		sl-BayesianGaussianMixture-set-verbose(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-verbose;		sl-BayesianGaussianMixture-set-verbose(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-BayesianGaussianMixture-set-verbose_interval;		sl-BayesianGaussianMixture-set-verbose_interval(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-verbose_interval;		sl-BayesianGaussianMixture-set-verbose_interval(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_verbose_interval(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose_interval', t)
sl-BayesianGaussianMixture-set-warm_start;		sl-BayesianGaussianMixture-set-warm_start(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-warm_start;		sl-BayesianGaussianMixture-set-warm_start(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)
sl-BayesianGaussianMixture-set-weight_concentration_prior_type;		sl-BayesianGaussianMixture-set-weight_concentration_prior_type(c,p); c,p; ; ;  noop()
sl-BayesianGaussianMixture-set-weight_concentration_prior_type;		sl-BayesianGaussianMixture-set-weight_concentration_prior_type(c,p); c,p,t; ; OptionsFor_BayesianGaussianMixture_weight_concentration_prior_type(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-weight_concentration_prior_type', t)


###################
### BernoulliNB ###
###################

sl_BernoulliNB;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.naive_bayes.BernoulliNB',p)	->	sl-BernoulliNB-set-alpha(c,p)	->	sl-BernoulliNB-set-binarize(c,p)	->	sl-BernoulliNB-set-fit_prior(c,p)

### Options Predicates for BernoulliNB ###

sl-BernoulliNB-set-alpha;		sl-BernoulliNB-set-alpha(c,p); c,p; ; ;  noop()
sl-BernoulliNB-set-alpha;		sl-BernoulliNB-set-alpha(c,p); c,p,t; ; OptionsFor_BernoulliNB_alpha(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-BernoulliNB-set-binarize;		sl-BernoulliNB-set-binarize(c,p); c,p; ; ;  noop()
sl-BernoulliNB-set-binarize;		sl-BernoulliNB-set-binarize(c,p); c,p,t; ; OptionsFor_BernoulliNB_binarize(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-binarize', t)
sl-BernoulliNB-set-fit_prior;		sl-BernoulliNB-set-fit_prior(c,p); c,p; ; ;  noop()
sl-BernoulliNB-set-fit_prior;		sl-BernoulliNB-set-fit_prior(c,p); c,p,t; ; OptionsFor_BernoulliNB_fit_prior(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_prior', t)


###########################
### ExtraTreeClassifier ###
###########################

sl_ExtraTreeClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.tree.ExtraTreeClassifier',p)	->	sl-ExtraTreeClassifier-set-criterion(c,p)	->	sl-ExtraTreeClassifier-set-max_features(c,p)	->	sl-ExtraTreeClassifier-set-min_impurity_decrease(c,p)	->	sl-ExtraTreeClassifier-set-min_samples_leaf(c,p)	->	sl-ExtraTreeClassifier-set-min_samples_split(c,p)	->	sl-ExtraTreeClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-ExtraTreeClassifier-set-splitter(c,p)

### Options Predicates for ExtraTreeClassifier ###

sl-ExtraTreeClassifier-set-criterion;		sl-ExtraTreeClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-criterion;		sl-ExtraTreeClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_criterion(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-ExtraTreeClassifier-set-max_features;		sl-ExtraTreeClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-max_features;		sl-ExtraTreeClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_max_features(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-ExtraTreeClassifier-set-min_impurity_decrease;		sl-ExtraTreeClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-min_impurity_decrease;		sl-ExtraTreeClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_min_impurity_decrease(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-ExtraTreeClassifier-set-min_samples_leaf;		sl-ExtraTreeClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-min_samples_leaf;		sl-ExtraTreeClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_min_samples_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-ExtraTreeClassifier-set-min_samples_split;		sl-ExtraTreeClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-min_samples_split;		sl-ExtraTreeClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_min_samples_split(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-ExtraTreeClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreeClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreeClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_min_weight_fraction_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-ExtraTreeClassifier-set-splitter;		sl-ExtraTreeClassifier-set-splitter(c,p); c,p; ; ;  noop()
sl-ExtraTreeClassifier-set-splitter;		sl-ExtraTreeClassifier-set-splitter(c,p); c,p,t; ; OptionsFor_ExtraTreeClassifier_splitter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-splitter', t)


############################
### ExtraTreesClassifier ###
############################

sl_ExtraTreesClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.ExtraTreesClassifier',p)	->	sl-ExtraTreesClassifier-set-bootstrap(c,p)	->	sl-ExtraTreesClassifier-set-criterion(c,p)	->	sl-ExtraTreesClassifier-set-max_features(c,p)	->	sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p)	->	sl-ExtraTreesClassifier-set-min_samples_leaf(c,p)	->	sl-ExtraTreesClassifier-set-min_samples_split(c,p)	->	sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-ExtraTreesClassifier-set-n_estimators(c,p)	->	sl-ExtraTreesClassifier-set-n_jobs(c,p)	->	sl-ExtraTreesClassifier-set-oob_score(c,p)	->	sl-ExtraTreesClassifier-set-verbose(c,p)	->	sl-ExtraTreesClassifier-set-warm_start(c,p)

### Options Predicates for ExtraTreesClassifier ###

sl-ExtraTreesClassifier-set-bootstrap;		sl-ExtraTreesClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-bootstrap;		sl-ExtraTreesClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_bootstrap(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-ExtraTreesClassifier-set-criterion;		sl-ExtraTreesClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-criterion;		sl-ExtraTreesClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_criterion(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-ExtraTreesClassifier-set-max_features;		sl-ExtraTreesClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-max_features;		sl-ExtraTreesClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_max_features(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-ExtraTreesClassifier-set-min_impurity_decrease;		sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_impurity_decrease;		sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_impurity_decrease(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-ExtraTreesClassifier-set-min_samples_leaf;		sl-ExtraTreesClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_samples_leaf;		sl-ExtraTreesClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_samples_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-ExtraTreesClassifier-set-min_samples_split;		sl-ExtraTreesClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_samples_split;		sl-ExtraTreesClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_samples_split(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-ExtraTreesClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_weight_fraction_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-ExtraTreesClassifier-set-n_estimators;		sl-ExtraTreesClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-n_estimators;		sl-ExtraTreesClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-ExtraTreesClassifier-set-n_jobs;		sl-ExtraTreesClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-n_jobs;		sl-ExtraTreesClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-ExtraTreesClassifier-set-oob_score;		sl-ExtraTreesClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-oob_score;		sl-ExtraTreesClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_oob_score(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-ExtraTreesClassifier-set-verbose;		sl-ExtraTreesClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-verbose;		sl-ExtraTreesClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-ExtraTreesClassifier-set-warm_start;		sl-ExtraTreesClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-warm_start;		sl-ExtraTreesClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


##################
### GaussianNB ###
##################

sl_GaussianNB;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.naive_bayes.GaussianNB',p)

### Options Predicates for GaussianNB ###



#################################
### GaussianProcessClassifier ###
#################################

sl_GaussianProcessClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.gaussian_process.GaussianProcessClassifier',p)	->	sl-GaussianProcessClassifier-set-copy_X_train(c,p)	->	sl-GaussianProcessClassifier-set-max_iter_predict(c,p)	->	sl-GaussianProcessClassifier-set-multi_class(c,p)	->	sl-GaussianProcessClassifier-set-n_jobs(c,p)	->	sl-GaussianProcessClassifier-set-n_restarts_optimizer(c,p)	->	sl-GaussianProcessClassifier-set-optimizer(c,p)	->	sl-GaussianProcessClassifier-set-warm_start(c,p)

### Options Predicates for GaussianProcessClassifier ###

sl-GaussianProcessClassifier-set-copy_X_train;		sl-GaussianProcessClassifier-set-copy_X_train(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-copy_X_train;		sl-GaussianProcessClassifier-set-copy_X_train(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_copy_X_train(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-copy_X_train', t)
sl-GaussianProcessClassifier-set-max_iter_predict;		sl-GaussianProcessClassifier-set-max_iter_predict(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-max_iter_predict;		sl-GaussianProcessClassifier-set-max_iter_predict(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_max_iter_predict(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter_predict', t)
sl-GaussianProcessClassifier-set-multi_class;		sl-GaussianProcessClassifier-set-multi_class(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-multi_class;		sl-GaussianProcessClassifier-set-multi_class(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_multi_class(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-multi_class', t)
sl-GaussianProcessClassifier-set-n_jobs;		sl-GaussianProcessClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-n_jobs;		sl-GaussianProcessClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-GaussianProcessClassifier-set-n_restarts_optimizer;		sl-GaussianProcessClassifier-set-n_restarts_optimizer(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-n_restarts_optimizer;		sl-GaussianProcessClassifier-set-n_restarts_optimizer(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_n_restarts_optimizer(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_restarts_optimizer', t)
sl-GaussianProcessClassifier-set-optimizer;		sl-GaussianProcessClassifier-set-optimizer(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-optimizer;		sl-GaussianProcessClassifier-set-optimizer(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_optimizer(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-optimizer', t)
sl-GaussianProcessClassifier-set-warm_start;		sl-GaussianProcessClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-GaussianProcessClassifier-set-warm_start;		sl-GaussianProcessClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_GaussianProcessClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


##################################
### GradientBoostingClassifier ###
##################################

sl_GradientBoostingClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.GradientBoostingClassifier',p)	->	sl-GradientBoostingClassifier-set-criterion(c,p)	->	sl-GradientBoostingClassifier-set-learning_rate(c,p)	->	sl-GradientBoostingClassifier-set-loss(c,p)	->	sl-GradientBoostingClassifier-set-max_depth(c,p)	->	sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p)	->	sl-GradientBoostingClassifier-set-min_samples_leaf(c,p)	->	sl-GradientBoostingClassifier-set-min_samples_split(c,p)	->	sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-GradientBoostingClassifier-set-n_estimators(c,p)	->	sl-GradientBoostingClassifier-set-presort(c,p)	->	sl-GradientBoostingClassifier-set-subsample(c,p)	->	sl-GradientBoostingClassifier-set-verbose(c,p)	->	sl-GradientBoostingClassifier-set-warm_start(c,p)

### Options Predicates for GradientBoostingClassifier ###

sl-GradientBoostingClassifier-set-criterion;		sl-GradientBoostingClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-criterion;		sl-GradientBoostingClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_criterion(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-GradientBoostingClassifier-set-learning_rate;		sl-GradientBoostingClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-learning_rate;		sl-GradientBoostingClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_learning_rate(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-GradientBoostingClassifier-set-loss;		sl-GradientBoostingClassifier-set-loss(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-loss;		sl-GradientBoostingClassifier-set-loss(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_loss(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-loss', t)
sl-GradientBoostingClassifier-set-max_depth;		sl-GradientBoostingClassifier-set-max_depth(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-max_depth;		sl-GradientBoostingClassifier-set-max_depth(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_max_depth(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_depth', t)
sl-GradientBoostingClassifier-set-min_impurity_decrease;		sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_impurity_decrease;		sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_impurity_decrease(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-GradientBoostingClassifier-set-min_samples_leaf;		sl-GradientBoostingClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_samples_leaf;		sl-GradientBoostingClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_samples_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-GradientBoostingClassifier-set-min_samples_split;		sl-GradientBoostingClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_samples_split;		sl-GradientBoostingClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_samples_split(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-GradientBoostingClassifier-set-min_weight_fraction_leaf;		sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_weight_fraction_leaf;		sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_weight_fraction_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-GradientBoostingClassifier-set-n_estimators;		sl-GradientBoostingClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-n_estimators;		sl-GradientBoostingClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-GradientBoostingClassifier-set-presort;		sl-GradientBoostingClassifier-set-presort(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-presort;		sl-GradientBoostingClassifier-set-presort(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_presort(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-presort', t)
sl-GradientBoostingClassifier-set-subsample;		sl-GradientBoostingClassifier-set-subsample(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-subsample;		sl-GradientBoostingClassifier-set-subsample(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_subsample(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-subsample', t)
sl-GradientBoostingClassifier-set-verbose;		sl-GradientBoostingClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-verbose;		sl-GradientBoostingClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-GradientBoostingClassifier-set-warm_start;		sl-GradientBoostingClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-warm_start;		sl-GradientBoostingClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


############################
### KNeighborsClassifier ###
############################

sl_KNeighborsClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.neighbors.KNeighborsClassifier',p)	->	sl-KNeighborsClassifier-set-algorithm(c,p)	->	sl-KNeighborsClassifier-set-leaf_size(c,p)	->	sl-KNeighborsClassifier-set-metric(c,p)	->	sl-KNeighborsClassifier-set-n_jobs(c,p)	->	sl-KNeighborsClassifier-set-n_neighbors(c,p)	->	sl-KNeighborsClassifier-set-p(c,p)	->	sl-KNeighborsClassifier-set-weights(c,p)

### Options Predicates for KNeighborsClassifier ###

sl-KNeighborsClassifier-set-algorithm;		sl-KNeighborsClassifier-set-algorithm(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-algorithm;		sl-KNeighborsClassifier-set-algorithm(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_algorithm(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-KNeighborsClassifier-set-leaf_size;		sl-KNeighborsClassifier-set-leaf_size(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-leaf_size;		sl-KNeighborsClassifier-set-leaf_size(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_leaf_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-leaf_size', t)
sl-KNeighborsClassifier-set-metric;		sl-KNeighborsClassifier-set-metric(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-metric;		sl-KNeighborsClassifier-set-metric(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_metric(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-metric', t)
sl-KNeighborsClassifier-set-n_jobs;		sl-KNeighborsClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-n_jobs;		sl-KNeighborsClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-KNeighborsClassifier-set-n_neighbors;		sl-KNeighborsClassifier-set-n_neighbors(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-n_neighbors;		sl-KNeighborsClassifier-set-n_neighbors(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_n_neighbors(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_neighbors', t)
sl-KNeighborsClassifier-set-p;		sl-KNeighborsClassifier-set-p(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-p;		sl-KNeighborsClassifier-set-p(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_p(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-p', t)
sl-KNeighborsClassifier-set-weights;		sl-KNeighborsClassifier-set-weights(c,p); c,p; ; ;  noop()
sl-KNeighborsClassifier-set-weights;		sl-KNeighborsClassifier-set-weights(c,p); c,p,t; ; OptionsFor_KNeighborsClassifier_weights(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-weights', t)


#################
### LSHForest ###
#################

sl_LSHForest;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.neighbors.LSHForest',p)	->	sl-LSHForest-set-min_hash_match(c,p)	->	sl-LSHForest-set-n_candidates(c,p)	->	sl-LSHForest-set-n_estimators(c,p)	->	sl-LSHForest-set-n_neighbors(c,p)	->	sl-LSHForest-set-radius(c,p)	->	sl-LSHForest-set-radius_cutoff_ratio(c,p)

### Options Predicates for LSHForest ###

sl-LSHForest-set-min_hash_match;		sl-LSHForest-set-min_hash_match(c,p); c,p; ; ;  noop()
sl-LSHForest-set-min_hash_match;		sl-LSHForest-set-min_hash_match(c,p); c,p,t; ; OptionsFor_LSHForest_min_hash_match(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_hash_match', t)
sl-LSHForest-set-n_candidates;		sl-LSHForest-set-n_candidates(c,p); c,p; ; ;  noop()
sl-LSHForest-set-n_candidates;		sl-LSHForest-set-n_candidates(c,p); c,p,t; ; OptionsFor_LSHForest_n_candidates(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_candidates', t)
sl-LSHForest-set-n_estimators;		sl-LSHForest-set-n_estimators(c,p); c,p; ; ;  noop()
sl-LSHForest-set-n_estimators;		sl-LSHForest-set-n_estimators(c,p); c,p,t; ; OptionsFor_LSHForest_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-LSHForest-set-n_neighbors;		sl-LSHForest-set-n_neighbors(c,p); c,p; ; ;  noop()
sl-LSHForest-set-n_neighbors;		sl-LSHForest-set-n_neighbors(c,p); c,p,t; ; OptionsFor_LSHForest_n_neighbors(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_neighbors', t)
sl-LSHForest-set-radius;		sl-LSHForest-set-radius(c,p); c,p; ; ;  noop()
sl-LSHForest-set-radius;		sl-LSHForest-set-radius(c,p); c,p,t; ; OptionsFor_LSHForest_radius(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-radius', t)
sl-LSHForest-set-radius_cutoff_ratio;		sl-LSHForest-set-radius_cutoff_ratio(c,p); c,p; ; ;  noop()
sl-LSHForest-set-radius_cutoff_ratio;		sl-LSHForest-set-radius_cutoff_ratio(c,p); c,p,t; ; OptionsFor_LSHForest_radius_cutoff_ratio(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-radius_cutoff_ratio', t)


##################################
### LinearDiscriminantAnalysis ###
##################################

sl_LinearDiscriminantAnalysis;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.discriminant_analysis.LinearDiscriminantAnalysis',p)	->	sl-LinearDiscriminantAnalysis-set-solver(c,p)	->	sl-LinearDiscriminantAnalysis-set-store_covariance(c,p)	->	sl-LinearDiscriminantAnalysis-set-tol(c,p)

### Options Predicates for LinearDiscriminantAnalysis ###

sl-LinearDiscriminantAnalysis-set-solver;		sl-LinearDiscriminantAnalysis-set-solver(c,p); c,p; ; ;  noop()
sl-LinearDiscriminantAnalysis-set-solver;		sl-LinearDiscriminantAnalysis-set-solver(c,p); c,p,t; ; OptionsFor_LinearDiscriminantAnalysis_solver(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-LinearDiscriminantAnalysis-set-store_covariance;		sl-LinearDiscriminantAnalysis-set-store_covariance(c,p); c,p; ; ;  noop()
sl-LinearDiscriminantAnalysis-set-store_covariance;		sl-LinearDiscriminantAnalysis-set-store_covariance(c,p); c,p,t; ; OptionsFor_LinearDiscriminantAnalysis_store_covariance(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-store_covariance', t)
sl-LinearDiscriminantAnalysis-set-tol;		sl-LinearDiscriminantAnalysis-set-tol(c,p); c,p; ; ;  noop()
sl-LinearDiscriminantAnalysis-set-tol;		sl-LinearDiscriminantAnalysis-set-tol(c,p); c,p,t; ; OptionsFor_LinearDiscriminantAnalysis_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)


#################
### LinearSVC ###
#################

sl_LinearSVC;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.svm.LinearSVC',p)	->	sl-LinearSVC-set-C(c,p)	->	sl-LinearSVC-set-dual(c,p)	->	sl-LinearSVC-set-fit_intercept(c,p)	->	sl-LinearSVC-set-intercept_scaling(c,p)	->	sl-LinearSVC-set-loss(c,p)	->	sl-LinearSVC-set-max_iter(c,p)	->	sl-LinearSVC-set-multi_class(c,p)	->	sl-LinearSVC-set-penalty(c,p)	->	sl-LinearSVC-set-tol(c,p)	->	sl-LinearSVC-set-verbose(c,p)

### Options Predicates for LinearSVC ###

sl-LinearSVC-set-C;		sl-LinearSVC-set-C(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-C;		sl-LinearSVC-set-C(c,p); c,p,t; ; OptionsFor_LinearSVC_C(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-C', t)
sl-LinearSVC-set-dual;		sl-LinearSVC-set-dual(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-dual;		sl-LinearSVC-set-dual(c,p); c,p,t; ; OptionsFor_LinearSVC_dual(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-dual', t)
sl-LinearSVC-set-fit_intercept;		sl-LinearSVC-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-fit_intercept;		sl-LinearSVC-set-fit_intercept(c,p); c,p,t; ; OptionsFor_LinearSVC_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-LinearSVC-set-intercept_scaling;		sl-LinearSVC-set-intercept_scaling(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-intercept_scaling;		sl-LinearSVC-set-intercept_scaling(c,p); c,p,t; ; OptionsFor_LinearSVC_intercept_scaling(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-intercept_scaling', t)
sl-LinearSVC-set-loss;		sl-LinearSVC-set-loss(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-loss;		sl-LinearSVC-set-loss(c,p); c,p,t; ; OptionsFor_LinearSVC_loss(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-loss', t)
sl-LinearSVC-set-max_iter;		sl-LinearSVC-set-max_iter(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-max_iter;		sl-LinearSVC-set-max_iter(c,p); c,p,t; ; OptionsFor_LinearSVC_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-LinearSVC-set-multi_class;		sl-LinearSVC-set-multi_class(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-multi_class;		sl-LinearSVC-set-multi_class(c,p); c,p,t; ; OptionsFor_LinearSVC_multi_class(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-multi_class', t)
sl-LinearSVC-set-penalty;		sl-LinearSVC-set-penalty(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-penalty;		sl-LinearSVC-set-penalty(c,p); c,p,t; ; OptionsFor_LinearSVC_penalty(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-penalty', t)
sl-LinearSVC-set-tol;		sl-LinearSVC-set-tol(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-tol;		sl-LinearSVC-set-tol(c,p); c,p,t; ; OptionsFor_LinearSVC_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-LinearSVC-set-verbose;		sl-LinearSVC-set-verbose(c,p); c,p; ; ;  noop()
sl-LinearSVC-set-verbose;		sl-LinearSVC-set-verbose(c,p); c,p,t; ; OptionsFor_LinearSVC_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)


##########################
### LogisticRegression ###
##########################

sl_LogisticRegression;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.LogisticRegression',p)	->	sl-LogisticRegression-set-C(c,p)	->	sl-LogisticRegression-set-dual(c,p)	->	sl-LogisticRegression-set-fit_intercept(c,p)	->	sl-LogisticRegression-set-intercept_scaling(c,p)	->	sl-LogisticRegression-set-max_iter(c,p)	->	sl-LogisticRegression-set-multi_class(c,p)	->	sl-LogisticRegression-set-n_jobs(c,p)	->	sl-LogisticRegression-set-penalty(c,p)	->	sl-LogisticRegression-set-solver(c,p)	->	sl-LogisticRegression-set-tol(c,p)	->	sl-LogisticRegression-set-verbose(c,p)	->	sl-LogisticRegression-set-warm_start(c,p)

### Options Predicates for LogisticRegression ###

sl-LogisticRegression-set-C;		sl-LogisticRegression-set-C(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-C;		sl-LogisticRegression-set-C(c,p); c,p,t; ; OptionsFor_LogisticRegression_C(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-C', t)
sl-LogisticRegression-set-dual;		sl-LogisticRegression-set-dual(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-dual;		sl-LogisticRegression-set-dual(c,p); c,p,t; ; OptionsFor_LogisticRegression_dual(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-dual', t)
sl-LogisticRegression-set-fit_intercept;		sl-LogisticRegression-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-fit_intercept;		sl-LogisticRegression-set-fit_intercept(c,p); c,p,t; ; OptionsFor_LogisticRegression_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-LogisticRegression-set-intercept_scaling;		sl-LogisticRegression-set-intercept_scaling(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-intercept_scaling;		sl-LogisticRegression-set-intercept_scaling(c,p); c,p,t; ; OptionsFor_LogisticRegression_intercept_scaling(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-intercept_scaling', t)
sl-LogisticRegression-set-max_iter;		sl-LogisticRegression-set-max_iter(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-max_iter;		sl-LogisticRegression-set-max_iter(c,p); c,p,t; ; OptionsFor_LogisticRegression_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-LogisticRegression-set-multi_class;		sl-LogisticRegression-set-multi_class(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-multi_class;		sl-LogisticRegression-set-multi_class(c,p); c,p,t; ; OptionsFor_LogisticRegression_multi_class(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-multi_class', t)
sl-LogisticRegression-set-n_jobs;		sl-LogisticRegression-set-n_jobs(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-n_jobs;		sl-LogisticRegression-set-n_jobs(c,p); c,p,t; ; OptionsFor_LogisticRegression_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-LogisticRegression-set-penalty;		sl-LogisticRegression-set-penalty(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-penalty;		sl-LogisticRegression-set-penalty(c,p); c,p,t; ; OptionsFor_LogisticRegression_penalty(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-penalty', t)
sl-LogisticRegression-set-solver;		sl-LogisticRegression-set-solver(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-solver;		sl-LogisticRegression-set-solver(c,p); c,p,t; ; OptionsFor_LogisticRegression_solver(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-LogisticRegression-set-tol;		sl-LogisticRegression-set-tol(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-tol;		sl-LogisticRegression-set-tol(c,p); c,p,t; ; OptionsFor_LogisticRegression_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-LogisticRegression-set-verbose;		sl-LogisticRegression-set-verbose(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-verbose;		sl-LogisticRegression-set-verbose(c,p); c,p,t; ; OptionsFor_LogisticRegression_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-LogisticRegression-set-warm_start;		sl-LogisticRegression-set-warm_start(c,p); c,p; ; ;  noop()
sl-LogisticRegression-set-warm_start;		sl-LogisticRegression-set-warm_start(c,p); c,p,t; ; OptionsFor_LogisticRegression_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


############################
### LogisticRegressionCV ###
############################

sl_LogisticRegressionCV;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.LogisticRegressionCV',p)	->	sl-LogisticRegressionCV-set-Cs(c,p)	->	sl-LogisticRegressionCV-set-dual(c,p)	->	sl-LogisticRegressionCV-set-fit_intercept(c,p)	->	sl-LogisticRegressionCV-set-intercept_scaling(c,p)	->	sl-LogisticRegressionCV-set-max_iter(c,p)	->	sl-LogisticRegressionCV-set-multi_class(c,p)	->	sl-LogisticRegressionCV-set-n_jobs(c,p)	->	sl-LogisticRegressionCV-set-penalty(c,p)	->	sl-LogisticRegressionCV-set-refit(c,p)	->	sl-LogisticRegressionCV-set-solver(c,p)	->	sl-LogisticRegressionCV-set-tol(c,p)	->	sl-LogisticRegressionCV-set-verbose(c,p)

### Options Predicates for LogisticRegressionCV ###

sl-LogisticRegressionCV-set-Cs;		sl-LogisticRegressionCV-set-Cs(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-Cs;		sl-LogisticRegressionCV-set-Cs(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_Cs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-Cs', t)
sl-LogisticRegressionCV-set-dual;		sl-LogisticRegressionCV-set-dual(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-dual;		sl-LogisticRegressionCV-set-dual(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_dual(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-dual', t)
sl-LogisticRegressionCV-set-fit_intercept;		sl-LogisticRegressionCV-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-fit_intercept;		sl-LogisticRegressionCV-set-fit_intercept(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-LogisticRegressionCV-set-intercept_scaling;		sl-LogisticRegressionCV-set-intercept_scaling(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-intercept_scaling;		sl-LogisticRegressionCV-set-intercept_scaling(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_intercept_scaling(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-intercept_scaling', t)
sl-LogisticRegressionCV-set-max_iter;		sl-LogisticRegressionCV-set-max_iter(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-max_iter;		sl-LogisticRegressionCV-set-max_iter(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-LogisticRegressionCV-set-multi_class;		sl-LogisticRegressionCV-set-multi_class(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-multi_class;		sl-LogisticRegressionCV-set-multi_class(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_multi_class(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-multi_class', t)
sl-LogisticRegressionCV-set-n_jobs;		sl-LogisticRegressionCV-set-n_jobs(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-n_jobs;		sl-LogisticRegressionCV-set-n_jobs(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-LogisticRegressionCV-set-penalty;		sl-LogisticRegressionCV-set-penalty(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-penalty;		sl-LogisticRegressionCV-set-penalty(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_penalty(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-penalty', t)
sl-LogisticRegressionCV-set-refit;		sl-LogisticRegressionCV-set-refit(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-refit;		sl-LogisticRegressionCV-set-refit(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_refit(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-refit', t)
sl-LogisticRegressionCV-set-solver;		sl-LogisticRegressionCV-set-solver(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-solver;		sl-LogisticRegressionCV-set-solver(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_solver(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-LogisticRegressionCV-set-tol;		sl-LogisticRegressionCV-set-tol(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-tol;		sl-LogisticRegressionCV-set-tol(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-LogisticRegressionCV-set-verbose;		sl-LogisticRegressionCV-set-verbose(c,p); c,p; ; ;  noop()
sl-LogisticRegressionCV-set-verbose;		sl-LogisticRegressionCV-set-verbose(c,p); c,p,t; ; OptionsFor_LogisticRegressionCV_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#####################
### MultinomialNB ###
#####################

sl_MultinomialNB;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.naive_bayes.MultinomialNB',p)	->	sl-MultinomialNB-set-alpha(c,p)	->	sl-MultinomialNB-set-fit_prior(c,p)

### Options Predicates for MultinomialNB ###

sl-MultinomialNB-set-alpha;		sl-MultinomialNB-set-alpha(c,p); c,p; ; ;  noop()
sl-MultinomialNB-set-alpha;		sl-MultinomialNB-set-alpha(c,p); c,p,t; ; OptionsFor_MultinomialNB_alpha(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-MultinomialNB-set-fit_prior;		sl-MultinomialNB-set-fit_prior(c,p); c,p; ; ;  noop()
sl-MultinomialNB-set-fit_prior;		sl-MultinomialNB-set-fit_prior(c,p); c,p,t; ; OptionsFor_MultinomialNB_fit_prior(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_prior', t)


########################
### NearestNeighbors ###
########################

sl_NearestNeighbors;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.neighbors.NearestNeighbors',p)	->	sl-NearestNeighbors-set-algorithm(c,p)	->	sl-NearestNeighbors-set-leaf_size(c,p)	->	sl-NearestNeighbors-set-metric(c,p)	->	sl-NearestNeighbors-set-n_jobs(c,p)	->	sl-NearestNeighbors-set-n_neighbors(c,p)	->	sl-NearestNeighbors-set-p(c,p)	->	sl-NearestNeighbors-set-radius(c,p)

### Options Predicates for NearestNeighbors ###

sl-NearestNeighbors-set-algorithm;		sl-NearestNeighbors-set-algorithm(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-algorithm;		sl-NearestNeighbors-set-algorithm(c,p); c,p,t; ; OptionsFor_NearestNeighbors_algorithm(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-NearestNeighbors-set-leaf_size;		sl-NearestNeighbors-set-leaf_size(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-leaf_size;		sl-NearestNeighbors-set-leaf_size(c,p); c,p,t; ; OptionsFor_NearestNeighbors_leaf_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-leaf_size', t)
sl-NearestNeighbors-set-metric;		sl-NearestNeighbors-set-metric(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-metric;		sl-NearestNeighbors-set-metric(c,p); c,p,t; ; OptionsFor_NearestNeighbors_metric(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-metric', t)
sl-NearestNeighbors-set-n_jobs;		sl-NearestNeighbors-set-n_jobs(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-n_jobs;		sl-NearestNeighbors-set-n_jobs(c,p); c,p,t; ; OptionsFor_NearestNeighbors_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-NearestNeighbors-set-n_neighbors;		sl-NearestNeighbors-set-n_neighbors(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-n_neighbors;		sl-NearestNeighbors-set-n_neighbors(c,p); c,p,t; ; OptionsFor_NearestNeighbors_n_neighbors(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_neighbors', t)
sl-NearestNeighbors-set-p;		sl-NearestNeighbors-set-p(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-p;		sl-NearestNeighbors-set-p(c,p); c,p,t; ; OptionsFor_NearestNeighbors_p(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-p', t)
sl-NearestNeighbors-set-radius;		sl-NearestNeighbors-set-radius(c,p); c,p; ; ;  noop()
sl-NearestNeighbors-set-radius;		sl-NearestNeighbors-set-radius(c,p); c,p,t; ; OptionsFor_NearestNeighbors_radius(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-radius', t)


#############
### NuSVC ###
#############

sl_NuSVC;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.svm.NuSVC',p)	->	sl-NuSVC-set-cache_size(c,p)	->	sl-NuSVC-set-coef0(c,p)	->	sl-NuSVC-set-decision_function_shape(c,p)	->	sl-NuSVC-set-degree(c,p)	->	sl-NuSVC-set-gamma(c,p)	->	sl-NuSVC-set-kernel(c,p)	->	sl-NuSVC-set-max_iter(c,p)	->	sl-NuSVC-set-nu(c,p)	->	sl-NuSVC-set-probability(c,p)	->	sl-NuSVC-set-shrinking(c,p)	->	sl-NuSVC-set-tol(c,p)	->	sl-NuSVC-set-verbose(c,p)

### Options Predicates for NuSVC ###

sl-NuSVC-set-cache_size;		sl-NuSVC-set-cache_size(c,p); c,p; ; ;  noop()
sl-NuSVC-set-cache_size;		sl-NuSVC-set-cache_size(c,p); c,p,t; ; OptionsFor_NuSVC_cache_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-cache_size', t)
sl-NuSVC-set-coef0;		sl-NuSVC-set-coef0(c,p); c,p; ; ;  noop()
sl-NuSVC-set-coef0;		sl-NuSVC-set-coef0(c,p); c,p,t; ; OptionsFor_NuSVC_coef0(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-coef0', t)
sl-NuSVC-set-decision_function_shape;		sl-NuSVC-set-decision_function_shape(c,p); c,p; ; ;  noop()
sl-NuSVC-set-decision_function_shape;		sl-NuSVC-set-decision_function_shape(c,p); c,p,t; ; OptionsFor_NuSVC_decision_function_shape(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-decision_function_shape', t)
sl-NuSVC-set-degree;		sl-NuSVC-set-degree(c,p); c,p; ; ;  noop()
sl-NuSVC-set-degree;		sl-NuSVC-set-degree(c,p); c,p,t; ; OptionsFor_NuSVC_degree(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-degree', t)
sl-NuSVC-set-gamma;		sl-NuSVC-set-gamma(c,p); c,p; ; ;  noop()
sl-NuSVC-set-gamma;		sl-NuSVC-set-gamma(c,p); c,p,t; ; OptionsFor_NuSVC_gamma(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-gamma', t)
sl-NuSVC-set-kernel;		sl-NuSVC-set-kernel(c,p); c,p; ; ;  noop()
sl-NuSVC-set-kernel;		sl-NuSVC-set-kernel(c,p); c,p,t; ; OptionsFor_NuSVC_kernel(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-kernel', t)
sl-NuSVC-set-max_iter;		sl-NuSVC-set-max_iter(c,p); c,p; ; ;  noop()
sl-NuSVC-set-max_iter;		sl-NuSVC-set-max_iter(c,p); c,p,t; ; OptionsFor_NuSVC_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-NuSVC-set-nu;		sl-NuSVC-set-nu(c,p); c,p; ; ;  noop()
sl-NuSVC-set-nu;		sl-NuSVC-set-nu(c,p); c,p,t; ; OptionsFor_NuSVC_nu(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-nu', t)
sl-NuSVC-set-probability;		sl-NuSVC-set-probability(c,p); c,p; ; ;  noop()
sl-NuSVC-set-probability;		sl-NuSVC-set-probability(c,p); c,p,t; ; OptionsFor_NuSVC_probability(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-probability', t)
sl-NuSVC-set-shrinking;		sl-NuSVC-set-shrinking(c,p); c,p; ; ;  noop()
sl-NuSVC-set-shrinking;		sl-NuSVC-set-shrinking(c,p); c,p,t; ; OptionsFor_NuSVC_shrinking(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-shrinking', t)
sl-NuSVC-set-tol;		sl-NuSVC-set-tol(c,p); c,p; ; ;  noop()
sl-NuSVC-set-tol;		sl-NuSVC-set-tol(c,p); c,p,t; ; OptionsFor_NuSVC_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-NuSVC-set-verbose;		sl-NuSVC-set-verbose(c,p); c,p; ; ;  noop()
sl-NuSVC-set-verbose;		sl-NuSVC-set-verbose(c,p); c,p,t; ; OptionsFor_NuSVC_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)


###################################
### PassiveAggressiveClassifier ###
###################################

sl_PassiveAggressiveClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.PassiveAggressiveClassifier',p)	->	sl-PassiveAggressiveClassifier-set-C(c,p)	->	sl-PassiveAggressiveClassifier-set-average(c,p)	->	sl-PassiveAggressiveClassifier-set-fit_intercept(c,p)	->	sl-PassiveAggressiveClassifier-set-loss(c,p)	->	sl-PassiveAggressiveClassifier-set-n_jobs(c,p)	->	sl-PassiveAggressiveClassifier-set-shuffle(c,p)	->	sl-PassiveAggressiveClassifier-set-verbose(c,p)	->	sl-PassiveAggressiveClassifier-set-warm_start(c,p)

### Options Predicates for PassiveAggressiveClassifier ###

sl-PassiveAggressiveClassifier-set-C;		sl-PassiveAggressiveClassifier-set-C(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-C;		sl-PassiveAggressiveClassifier-set-C(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_C(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-C', t)
sl-PassiveAggressiveClassifier-set-average;		sl-PassiveAggressiveClassifier-set-average(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-average;		sl-PassiveAggressiveClassifier-set-average(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_average(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-average', t)
sl-PassiveAggressiveClassifier-set-fit_intercept;		sl-PassiveAggressiveClassifier-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-fit_intercept;		sl-PassiveAggressiveClassifier-set-fit_intercept(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-PassiveAggressiveClassifier-set-loss;		sl-PassiveAggressiveClassifier-set-loss(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-loss;		sl-PassiveAggressiveClassifier-set-loss(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_loss(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-loss', t)
sl-PassiveAggressiveClassifier-set-n_jobs;		sl-PassiveAggressiveClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-n_jobs;		sl-PassiveAggressiveClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-PassiveAggressiveClassifier-set-shuffle;		sl-PassiveAggressiveClassifier-set-shuffle(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-shuffle;		sl-PassiveAggressiveClassifier-set-shuffle(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_shuffle(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-PassiveAggressiveClassifier-set-verbose;		sl-PassiveAggressiveClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-verbose;		sl-PassiveAggressiveClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-PassiveAggressiveClassifier-set-warm_start;		sl-PassiveAggressiveClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-PassiveAggressiveClassifier-set-warm_start;		sl-PassiveAggressiveClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_PassiveAggressiveClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


#####################################
### QuadraticDiscriminantAnalysis ###
#####################################

sl_QuadraticDiscriminantAnalysis;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis',p)	->	sl-QuadraticDiscriminantAnalysis-set-reg_param(c,p)	->	sl-QuadraticDiscriminantAnalysis-set-store_covariance(c,p)	->	sl-QuadraticDiscriminantAnalysis-set-tol(c,p)

### Options Predicates for QuadraticDiscriminantAnalysis ###

sl-QuadraticDiscriminantAnalysis-set-reg_param;		sl-QuadraticDiscriminantAnalysis-set-reg_param(c,p); c,p; ; ;  noop()
sl-QuadraticDiscriminantAnalysis-set-reg_param;		sl-QuadraticDiscriminantAnalysis-set-reg_param(c,p); c,p,t; ; OptionsFor_QuadraticDiscriminantAnalysis_reg_param(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-reg_param', t)
sl-QuadraticDiscriminantAnalysis-set-store_covariance;		sl-QuadraticDiscriminantAnalysis-set-store_covariance(c,p); c,p; ; ;  noop()
sl-QuadraticDiscriminantAnalysis-set-store_covariance;		sl-QuadraticDiscriminantAnalysis-set-store_covariance(c,p); c,p,t; ; OptionsFor_QuadraticDiscriminantAnalysis_store_covariance(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-store_covariance', t)
sl-QuadraticDiscriminantAnalysis-set-tol;		sl-QuadraticDiscriminantAnalysis-set-tol(c,p); c,p; ; ;  noop()
sl-QuadraticDiscriminantAnalysis-set-tol;		sl-QuadraticDiscriminantAnalysis-set-tol(c,p); c,p,t; ; OptionsFor_QuadraticDiscriminantAnalysis_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)


#################################
### RadiusNeighborsClassifier ###
#################################

sl_RadiusNeighborsClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.neighbors.RadiusNeighborsClassifier',p)	->	sl-RadiusNeighborsClassifier-set-algorithm(c,p)	->	sl-RadiusNeighborsClassifier-set-leaf_size(c,p)	->	sl-RadiusNeighborsClassifier-set-metric(c,p)	->	sl-RadiusNeighborsClassifier-set-p(c,p)	->	sl-RadiusNeighborsClassifier-set-radius(c,p)	->	sl-RadiusNeighborsClassifier-set-weights(c,p)

### Options Predicates for RadiusNeighborsClassifier ###

sl-RadiusNeighborsClassifier-set-algorithm;		sl-RadiusNeighborsClassifier-set-algorithm(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-algorithm;		sl-RadiusNeighborsClassifier-set-algorithm(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_algorithm(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-RadiusNeighborsClassifier-set-leaf_size;		sl-RadiusNeighborsClassifier-set-leaf_size(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-leaf_size;		sl-RadiusNeighborsClassifier-set-leaf_size(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_leaf_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-leaf_size', t)
sl-RadiusNeighborsClassifier-set-metric;		sl-RadiusNeighborsClassifier-set-metric(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-metric;		sl-RadiusNeighborsClassifier-set-metric(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_metric(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-metric', t)
sl-RadiusNeighborsClassifier-set-p;		sl-RadiusNeighborsClassifier-set-p(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-p;		sl-RadiusNeighborsClassifier-set-p(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_p(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-p', t)
sl-RadiusNeighborsClassifier-set-radius;		sl-RadiusNeighborsClassifier-set-radius(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-radius;		sl-RadiusNeighborsClassifier-set-radius(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_radius(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-radius', t)
sl-RadiusNeighborsClassifier-set-weights;		sl-RadiusNeighborsClassifier-set-weights(c,p); c,p; ; ;  noop()
sl-RadiusNeighborsClassifier-set-weights;		sl-RadiusNeighborsClassifier-set-weights(c,p); c,p,t; ; OptionsFor_RadiusNeighborsClassifier_weights(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-weights', t)


##############################
### RandomForestClassifier ###
##############################

sl_RandomForestClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.RandomForestClassifier',p)	->	sl-RandomForestClassifier-set-bootstrap(c,p)	->	sl-RandomForestClassifier-set-criterion(c,p)	->	sl-RandomForestClassifier-set-max_features(c,p)	->	sl-RandomForestClassifier-set-min_impurity_decrease(c,p)	->	sl-RandomForestClassifier-set-min_samples_leaf(c,p)	->	sl-RandomForestClassifier-set-min_samples_split(c,p)	->	sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-RandomForestClassifier-set-n_estimators(c,p)	->	sl-RandomForestClassifier-set-n_jobs(c,p)	->	sl-RandomForestClassifier-set-oob_score(c,p)	->	sl-RandomForestClassifier-set-verbose(c,p)	->	sl-RandomForestClassifier-set-warm_start(c,p)

### Options Predicates for RandomForestClassifier ###

sl-RandomForestClassifier-set-bootstrap;		sl-RandomForestClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-bootstrap;		sl-RandomForestClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_bootstrap(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-RandomForestClassifier-set-criterion;		sl-RandomForestClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-criterion;		sl-RandomForestClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_criterion(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-RandomForestClassifier-set-max_features;		sl-RandomForestClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-max_features;		sl-RandomForestClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_max_features(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-RandomForestClassifier-set-min_impurity_decrease;		sl-RandomForestClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_impurity_decrease;		sl-RandomForestClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_impurity_decrease(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-RandomForestClassifier-set-min_samples_leaf;		sl-RandomForestClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_samples_leaf;		sl-RandomForestClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_samples_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-RandomForestClassifier-set-min_samples_split;		sl-RandomForestClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_samples_split;		sl-RandomForestClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_samples_split(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-RandomForestClassifier-set-min_weight_fraction_leaf;		sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_weight_fraction_leaf;		sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_weight_fraction_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-RandomForestClassifier-set-n_estimators;		sl-RandomForestClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-n_estimators;		sl-RandomForestClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_n_estimators(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-RandomForestClassifier-set-n_jobs;		sl-RandomForestClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-n_jobs;		sl-RandomForestClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-RandomForestClassifier-set-oob_score;		sl-RandomForestClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-oob_score;		sl-RandomForestClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_oob_score(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-RandomForestClassifier-set-verbose;		sl-RandomForestClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-verbose;		sl-RandomForestClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-RandomForestClassifier-set-warm_start;		sl-RandomForestClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-warm_start;		sl-RandomForestClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


#######################
### RidgeClassifier ###
#######################

sl_RidgeClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.RidgeClassifier',p)	->	sl-RidgeClassifier-set-alpha(c,p)	->	sl-RidgeClassifier-set-copy_X(c,p)	->	sl-RidgeClassifier-set-fit_intercept(c,p)	->	sl-RidgeClassifier-set-normalize(c,p)	->	sl-RidgeClassifier-set-solver(c,p)	->	sl-RidgeClassifier-set-tol(c,p)

### Options Predicates for RidgeClassifier ###

sl-RidgeClassifier-set-alpha;		sl-RidgeClassifier-set-alpha(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-alpha;		sl-RidgeClassifier-set-alpha(c,p); c,p,t; ; OptionsFor_RidgeClassifier_alpha(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-RidgeClassifier-set-copy_X;		sl-RidgeClassifier-set-copy_X(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-copy_X;		sl-RidgeClassifier-set-copy_X(c,p); c,p,t; ; OptionsFor_RidgeClassifier_copy_X(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-copy_X', t)
sl-RidgeClassifier-set-fit_intercept;		sl-RidgeClassifier-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-fit_intercept;		sl-RidgeClassifier-set-fit_intercept(c,p); c,p,t; ; OptionsFor_RidgeClassifier_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-RidgeClassifier-set-normalize;		sl-RidgeClassifier-set-normalize(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-normalize;		sl-RidgeClassifier-set-normalize(c,p); c,p,t; ; OptionsFor_RidgeClassifier_normalize(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-normalize', t)
sl-RidgeClassifier-set-solver;		sl-RidgeClassifier-set-solver(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-solver;		sl-RidgeClassifier-set-solver(c,p); c,p,t; ; OptionsFor_RidgeClassifier_solver(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-RidgeClassifier-set-tol;		sl-RidgeClassifier-set-tol(c,p); c,p; ; ;  noop()
sl-RidgeClassifier-set-tol;		sl-RidgeClassifier-set-tol(c,p); c,p,t; ; OptionsFor_RidgeClassifier_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)


#########################
### RidgeClassifierCV ###
#########################

sl_RidgeClassifierCV;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.RidgeClassifierCV',p)	->	sl-RidgeClassifierCV-set-alphas(c,p)	->	sl-RidgeClassifierCV-set-fit_intercept(c,p)	->	sl-RidgeClassifierCV-set-normalize(c,p)

### Options Predicates for RidgeClassifierCV ###

sl-RidgeClassifierCV-set-alphas;		sl-RidgeClassifierCV-set-alphas(c,p); c,p; ; ;  noop()
sl-RidgeClassifierCV-set-alphas;		sl-RidgeClassifierCV-set-alphas(c,p); c,p,t; ; OptionsFor_RidgeClassifierCV_alphas(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alphas', t)
sl-RidgeClassifierCV-set-fit_intercept;		sl-RidgeClassifierCV-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-RidgeClassifierCV-set-fit_intercept;		sl-RidgeClassifierCV-set-fit_intercept(c,p); c,p,t; ; OptionsFor_RidgeClassifierCV_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-RidgeClassifierCV-set-normalize;		sl-RidgeClassifierCV-set-normalize(c,p); c,p; ; ;  noop()
sl-RidgeClassifierCV-set-normalize;		sl-RidgeClassifierCV-set-normalize(c,p); c,p,t; ; OptionsFor_RidgeClassifierCV_normalize(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-normalize', t)


#####################
### SGDClassifier ###
#####################

sl_SGDClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.linear_model.SGDClassifier',p)	->	sl-SGDClassifier-set-alpha(c,p)	->	sl-SGDClassifier-set-average(c,p)	->	sl-SGDClassifier-set-epsilon(c,p)	->	sl-SGDClassifier-set-eta0(c,p)	->	sl-SGDClassifier-set-fit_intercept(c,p)	->	sl-SGDClassifier-set-l1_ratio(c,p)	->	sl-SGDClassifier-set-learning_rate(c,p)	->	sl-SGDClassifier-set-loss(c,p)	->	sl-SGDClassifier-set-n_jobs(c,p)	->	sl-SGDClassifier-set-penalty(c,p)	->	sl-SGDClassifier-set-power_t(c,p)	->	sl-SGDClassifier-set-shuffle(c,p)	->	sl-SGDClassifier-set-verbose(c,p)	->	sl-SGDClassifier-set-warm_start(c,p)

### Options Predicates for SGDClassifier ###

sl-SGDClassifier-set-alpha;		sl-SGDClassifier-set-alpha(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-alpha;		sl-SGDClassifier-set-alpha(c,p); c,p,t; ; OptionsFor_SGDClassifier_alpha(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-SGDClassifier-set-average;		sl-SGDClassifier-set-average(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-average;		sl-SGDClassifier-set-average(c,p); c,p,t; ; OptionsFor_SGDClassifier_average(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-average', t)
sl-SGDClassifier-set-epsilon;		sl-SGDClassifier-set-epsilon(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-epsilon;		sl-SGDClassifier-set-epsilon(c,p); c,p,t; ; OptionsFor_SGDClassifier_epsilon(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-epsilon', t)
sl-SGDClassifier-set-eta0;		sl-SGDClassifier-set-eta0(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-eta0;		sl-SGDClassifier-set-eta0(c,p); c,p,t; ; OptionsFor_SGDClassifier_eta0(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-eta0', t)
sl-SGDClassifier-set-fit_intercept;		sl-SGDClassifier-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-fit_intercept;		sl-SGDClassifier-set-fit_intercept(c,p); c,p,t; ; OptionsFor_SGDClassifier_fit_intercept(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-SGDClassifier-set-l1_ratio;		sl-SGDClassifier-set-l1_ratio(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-l1_ratio;		sl-SGDClassifier-set-l1_ratio(c,p); c,p,t; ; OptionsFor_SGDClassifier_l1_ratio(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-l1_ratio', t)
sl-SGDClassifier-set-learning_rate;		sl-SGDClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-learning_rate;		sl-SGDClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_SGDClassifier_learning_rate(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-SGDClassifier-set-loss;		sl-SGDClassifier-set-loss(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-loss;		sl-SGDClassifier-set-loss(c,p); c,p,t; ; OptionsFor_SGDClassifier_loss(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-loss', t)
sl-SGDClassifier-set-n_jobs;		sl-SGDClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-n_jobs;		sl-SGDClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_SGDClassifier_n_jobs(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-SGDClassifier-set-penalty;		sl-SGDClassifier-set-penalty(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-penalty;		sl-SGDClassifier-set-penalty(c,p); c,p,t; ; OptionsFor_SGDClassifier_penalty(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-penalty', t)
sl-SGDClassifier-set-power_t;		sl-SGDClassifier-set-power_t(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-power_t;		sl-SGDClassifier-set-power_t(c,p); c,p,t; ; OptionsFor_SGDClassifier_power_t(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-power_t', t)
sl-SGDClassifier-set-shuffle;		sl-SGDClassifier-set-shuffle(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-shuffle;		sl-SGDClassifier-set-shuffle(c,p); c,p,t; ; OptionsFor_SGDClassifier_shuffle(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-SGDClassifier-set-verbose;		sl-SGDClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-verbose;		sl-SGDClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_SGDClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-SGDClassifier-set-warm_start;		sl-SGDClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-SGDClassifier-set-warm_start;		sl-SGDClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_SGDClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


###########
### SVC ###
###########

sl_SVC;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.svm.SVC',p)	->	sl-SVC-set-C(c,p)	->	sl-SVC-set-cache_size(c,p)	->	sl-SVC-set-coef0(c,p)	->	sl-SVC-set-decision_function_shape(c,p)	->	sl-SVC-set-degree(c,p)	->	sl-SVC-set-gamma(c,p)	->	sl-SVC-set-kernel(c,p)	->	sl-SVC-set-max_iter(c,p)	->	sl-SVC-set-probability(c,p)	->	sl-SVC-set-shrinking(c,p)	->	sl-SVC-set-tol(c,p)	->	sl-SVC-set-verbose(c,p)

### Options Predicates for SVC ###

sl-SVC-set-C;		sl-SVC-set-C(c,p); c,p; ; ;  noop()
sl-SVC-set-C;		sl-SVC-set-C(c,p); c,p,t; ; OptionsFor_SVC_C(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-C', t)
sl-SVC-set-cache_size;		sl-SVC-set-cache_size(c,p); c,p; ; ;  noop()
sl-SVC-set-cache_size;		sl-SVC-set-cache_size(c,p); c,p,t; ; OptionsFor_SVC_cache_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-cache_size', t)
sl-SVC-set-coef0;		sl-SVC-set-coef0(c,p); c,p; ; ;  noop()
sl-SVC-set-coef0;		sl-SVC-set-coef0(c,p); c,p,t; ; OptionsFor_SVC_coef0(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-coef0', t)
sl-SVC-set-decision_function_shape;		sl-SVC-set-decision_function_shape(c,p); c,p; ; ;  noop()
sl-SVC-set-decision_function_shape;		sl-SVC-set-decision_function_shape(c,p); c,p,t; ; OptionsFor_SVC_decision_function_shape(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-decision_function_shape', t)
sl-SVC-set-degree;		sl-SVC-set-degree(c,p); c,p; ; ;  noop()
sl-SVC-set-degree;		sl-SVC-set-degree(c,p); c,p,t; ; OptionsFor_SVC_degree(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-degree', t)
sl-SVC-set-gamma;		sl-SVC-set-gamma(c,p); c,p; ; ;  noop()
sl-SVC-set-gamma;		sl-SVC-set-gamma(c,p); c,p,t; ; OptionsFor_SVC_gamma(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-gamma', t)
sl-SVC-set-kernel;		sl-SVC-set-kernel(c,p); c,p; ; ;  noop()
sl-SVC-set-kernel;		sl-SVC-set-kernel(c,p); c,p,t; ; OptionsFor_SVC_kernel(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-kernel', t)
sl-SVC-set-max_iter;		sl-SVC-set-max_iter(c,p); c,p; ; ;  noop()
sl-SVC-set-max_iter;		sl-SVC-set-max_iter(c,p); c,p,t; ; OptionsFor_SVC_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-SVC-set-probability;		sl-SVC-set-probability(c,p); c,p; ; ;  noop()
sl-SVC-set-probability;		sl-SVC-set-probability(c,p); c,p,t; ; OptionsFor_SVC_probability(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-probability', t)
sl-SVC-set-shrinking;		sl-SVC-set-shrinking(c,p); c,p; ; ;  noop()
sl-SVC-set-shrinking;		sl-SVC-set-shrinking(c,p); c,p,t; ; OptionsFor_SVC_shrinking(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-shrinking', t)
sl-SVC-set-tol;		sl-SVC-set-tol(c,p); c,p; ; ;  noop()
sl-SVC-set-tol;		sl-SVC-set-tol(c,p); c,p,t; ; OptionsFor_SVC_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-SVC-set-verbose;		sl-SVC-set-verbose(c,p); c,p; ; ;  noop()
sl-SVC-set-verbose;		sl-SVC-set-verbose(c,p); c,p,t; ; OptionsFor_SVC_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#####################
### MLPClassifier ###
#####################

sl_MLPClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.neural_network.MLPClassifier',p)	->	sl-MLPClassifier-set-activation(c,p)	->	sl-MLPClassifier-set-alpha(c,p)	->	sl-MLPClassifier-set-batch_size(c,p)	->	sl-MLPClassifier-set-beta_1(c,p)	->	sl-MLPClassifier-set-beta_2(c,p)	->	sl-MLPClassifier-set-early_stopping(c,p)	->	sl-MLPClassifier-set-epsilon(c,p)	->	sl-MLPClassifier-set-hidden_layer_sizes(c,p)	->	sl-MLPClassifier-set-learning_rate(c,p)	->	sl-MLPClassifier-set-learning_rate_init(c,p)	->	sl-MLPClassifier-set-max_iter(c,p)	->	sl-MLPClassifier-set-momentum(c,p)	->	sl-MLPClassifier-set-nesterovs_momentum(c,p)	->	sl-MLPClassifier-set-power_t(c,p)	->	sl-MLPClassifier-set-shuffle(c,p)	->	sl-MLPClassifier-set-solver(c,p)	->	sl-MLPClassifier-set-tol(c,p)	->	sl-MLPClassifier-set-validation_fraction(c,p)	->	sl-MLPClassifier-set-verbose(c,p)	->	sl-MLPClassifier-set-warm_start(c,p)

### Options Predicates for MLPClassifier ###

sl-MLPClassifier-set-activation;		sl-MLPClassifier-set-activation(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-activation;		sl-MLPClassifier-set-activation(c,p); c,p,t; ; OptionsFor_MLPClassifier_activation(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-activation', t)
sl-MLPClassifier-set-alpha;		sl-MLPClassifier-set-alpha(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-alpha;		sl-MLPClassifier-set-alpha(c,p); c,p,t; ; OptionsFor_MLPClassifier_alpha(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-MLPClassifier-set-batch_size;		sl-MLPClassifier-set-batch_size(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-batch_size;		sl-MLPClassifier-set-batch_size(c,p); c,p,t; ; OptionsFor_MLPClassifier_batch_size(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-MLPClassifier-set-beta_1;		sl-MLPClassifier-set-beta_1(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-beta_1;		sl-MLPClassifier-set-beta_1(c,p); c,p,t; ; OptionsFor_MLPClassifier_beta_1(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-beta_1', t)
sl-MLPClassifier-set-beta_2;		sl-MLPClassifier-set-beta_2(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-beta_2;		sl-MLPClassifier-set-beta_2(c,p); c,p,t; ; OptionsFor_MLPClassifier_beta_2(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-beta_2', t)
sl-MLPClassifier-set-early_stopping;		sl-MLPClassifier-set-early_stopping(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-early_stopping;		sl-MLPClassifier-set-early_stopping(c,p); c,p,t; ; OptionsFor_MLPClassifier_early_stopping(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-early_stopping', t)
sl-MLPClassifier-set-epsilon;		sl-MLPClassifier-set-epsilon(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-epsilon;		sl-MLPClassifier-set-epsilon(c,p); c,p,t; ; OptionsFor_MLPClassifier_epsilon(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-epsilon', t)
sl-MLPClassifier-set-hidden_layer_sizes;		sl-MLPClassifier-set-hidden_layer_sizes(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-hidden_layer_sizes;		sl-MLPClassifier-set-hidden_layer_sizes(c,p); c,p,t; ; OptionsFor_MLPClassifier_hidden_layer_sizes(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-hidden_layer_sizes', t)
sl-MLPClassifier-set-learning_rate;		sl-MLPClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-learning_rate;		sl-MLPClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_MLPClassifier_learning_rate(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-MLPClassifier-set-learning_rate_init;		sl-MLPClassifier-set-learning_rate_init(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-learning_rate_init;		sl-MLPClassifier-set-learning_rate_init(c,p); c,p,t; ; OptionsFor_MLPClassifier_learning_rate_init(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-learning_rate_init', t)
sl-MLPClassifier-set-max_iter;		sl-MLPClassifier-set-max_iter(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-max_iter;		sl-MLPClassifier-set-max_iter(c,p); c,p,t; ; OptionsFor_MLPClassifier_max_iter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-MLPClassifier-set-momentum;		sl-MLPClassifier-set-momentum(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-momentum;		sl-MLPClassifier-set-momentum(c,p); c,p,t; ; OptionsFor_MLPClassifier_momentum(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-momentum', t)
sl-MLPClassifier-set-nesterovs_momentum;		sl-MLPClassifier-set-nesterovs_momentum(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-nesterovs_momentum;		sl-MLPClassifier-set-nesterovs_momentum(c,p); c,p,t; ; OptionsFor_MLPClassifier_nesterovs_momentum(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-nesterovs_momentum', t)
sl-MLPClassifier-set-power_t;		sl-MLPClassifier-set-power_t(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-power_t;		sl-MLPClassifier-set-power_t(c,p); c,p,t; ; OptionsFor_MLPClassifier_power_t(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-power_t', t)
sl-MLPClassifier-set-shuffle;		sl-MLPClassifier-set-shuffle(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-shuffle;		sl-MLPClassifier-set-shuffle(c,p); c,p,t; ; OptionsFor_MLPClassifier_shuffle(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-MLPClassifier-set-solver;		sl-MLPClassifier-set-solver(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-solver;		sl-MLPClassifier-set-solver(c,p); c,p,t; ; OptionsFor_MLPClassifier_solver(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-MLPClassifier-set-tol;		sl-MLPClassifier-set-tol(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-tol;		sl-MLPClassifier-set-tol(c,p); c,p,t; ; OptionsFor_MLPClassifier_tol(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-MLPClassifier-set-validation_fraction;		sl-MLPClassifier-set-validation_fraction(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-validation_fraction;		sl-MLPClassifier-set-validation_fraction(c,p); c,p,t; ; OptionsFor_MLPClassifier_validation_fraction(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-validation_fraction', t)
sl-MLPClassifier-set-verbose;		sl-MLPClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-verbose;		sl-MLPClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_MLPClassifier_verbose(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-MLPClassifier-set-warm_start;		sl-MLPClassifier-set-warm_start(c,p); c,p; ; ;  noop()
sl-MLPClassifier-set-warm_start;		sl-MLPClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_MLPClassifier_warm_start(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


##############################
### DecisionTreeClassifier ###
##############################

sl_DecisionTreeClassifier;			slCreateBaseClassifier(c); c,p; ; ; de.upb.crc901.services.mlpipeline.MLPipelinePlan:setClassifier(c,'sklearn.tree.DecisionTreeClassifier',p)	->	sl-DecisionTreeClassifier-set-criterion(c,p)	->	sl-DecisionTreeClassifier-set-min_impurity_decrease(c,p)	->	sl-DecisionTreeClassifier-set-min_samples_leaf(c,p)	->	sl-DecisionTreeClassifier-set-min_samples_split(c,p)	->	sl-DecisionTreeClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-DecisionTreeClassifier-set-presort(c,p)	->	sl-DecisionTreeClassifier-set-splitter(c,p)

### Options Predicates for DecisionTreeClassifier ###

sl-DecisionTreeClassifier-set-criterion;		sl-DecisionTreeClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-criterion;		sl-DecisionTreeClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_criterion(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-DecisionTreeClassifier-set-min_impurity_decrease;		sl-DecisionTreeClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-min_impurity_decrease;		sl-DecisionTreeClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_min_impurity_decrease(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-DecisionTreeClassifier-set-min_samples_leaf;		sl-DecisionTreeClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-min_samples_leaf;		sl-DecisionTreeClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_min_samples_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-DecisionTreeClassifier-set-min_samples_split;		sl-DecisionTreeClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-min_samples_split;		sl-DecisionTreeClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_min_samples_split(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-DecisionTreeClassifier-set-min_weight_fraction_leaf;		sl-DecisionTreeClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-min_weight_fraction_leaf;		sl-DecisionTreeClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_min_weight_fraction_leaf(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-DecisionTreeClassifier-set-presort;		sl-DecisionTreeClassifier-set-presort(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-presort;		sl-DecisionTreeClassifier-set-presort(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_presort(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-presort', t)
sl-DecisionTreeClassifier-set-splitter;		sl-DecisionTreeClassifier-set-splitter(c,p); c,p; ; ;  noop()
sl-DecisionTreeClassifier-set-splitter;		sl-DecisionTreeClassifier-set-splitter(c,p); c,p,t; ; OptionsFor_DecisionTreeClassifier_splitter(t); de.upb.crc901.services.mlpipeline.MLPipelinePlan:addOptions(c,p,'-splitter', t)
