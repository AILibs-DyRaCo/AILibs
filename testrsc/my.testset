#
# Knowledge base generated from SMAC parameter files in Auto-WEKA syntax
#
# For Auto-WEKA see:
# Chris Thornton, Frank Hutter, Holger H. Hoos, and Kevin Leyton-Brown
# Auto-WEKA: Combined Selection and Hyperparameter Optimization of Classification Algorithms
# http://www.cs.ubc.ca/labs/beta/Projects/autoweka/
# http://www.cs.ubc.ca/labs/beta/Projects/autoweka/manual.pdf
#
# For SMAC see:
# Frank Hutter, Holger Hoos, and Kevin Leyton-Brown
# An evaluation of sequential model-based optimization for expensive blackbox functions
# http://www.cs.ubc.ca/labs/beta/Projects/SMAC/
# http://www.cs.ubc.ca/labs/beta/Projects/SMAC/v2.10.03/manual.pdf
# userguide.pdf in autoweka-0.5.tar.gz
#




[NonFunctionalRequirements]


int Price: +






[Constants]


null:String

noDataPreprocessing:String

noFeaturePreprocessing:String

eval:String
search:String

hidden:String
visible:String

baseForEnsemble:String
kernel:String
optimizer:String
baseForMeta:String

### Integer Number Constants ###


-10:Number
-9:Number
-8:Number
-7:Number
-6:Number
-5:Number
-4:Number
-3:Number
-2:Number
-1:Number
0:Number
1:Number
2:Number
3:Number
4:Number
5:Number
6:Number
7:Number
8:Number
9:Number
10:Number
11:Number
12:Number
13:Number
14:Number
15:Number
16:Number
17:Number
18:Number
19:Number
20:Number
21:Number
22:Number
23:Number
24:Number
25:Number
26:Number
27:Number
28:Number
29:Number
30:Number
32:Number
50:Number
64:Number
100:Number
128:Number
256:Number
1000:Number
5000:Number
10000:Number
50000:Number


### Float Number Constants ###


0.0:Number
1.0E-12:Number
1.0E-7:Number
1.0E-5:Number
1.0E-4:Number
0.001:Number
0.01:Number
0.1:Number
0.2:Number
0.25:Number
0.3:Number
0.5:Number
1.0:Number
1.5:Number
2.0:Number
5.0:Number
10.0:Number


### String Constants ###


-1:String
-A:String
-B:String
-C:String
-D:String
-E:String
-F:String
-G:String
-H:String
-I:String
-J:String
-K:String
-L:String
-M:String
-N:String
-O:String
-P:String
-Q:String
-R:String
-S:String
-U:String
-V:String
-W:String
-X:String
-depth:String
0:String
1:String
10:String
100:String
120:String
2:String
3:String
30:String
4:String
60:String
90:String
AVG:String
MAJ:String
MAX:String
MIN:String
PROD:String
a:String
acc:String
auc:String
d:String
i:String
m:String
mae:String
n:String
o:String
rmse:String
t:String
weka.attributeSelection.BestFirst:String
weka.attributeSelection.CfsSubsetEval:String
weka.attributeSelection.GreedyStepwise:String
weka.classifiers.bayes.BayesNet:String
weka.classifiers.bayes.NaiveBayes:String
weka.classifiers.bayes.NaiveBayesMultinomial:String
weka.classifiers.bayes.net.search.local.HillClimber:String
weka.classifiers.bayes.net.search.local.K2:String
weka.classifiers.bayes.net.search.local.LAGDHillClimber:String
weka.classifiers.bayes.net.search.local.SimulatedAnnealing:String
weka.classifiers.bayes.net.search.local.TAN:String
weka.classifiers.bayes.net.search.local.TabuSearch:String
weka.classifiers.functions.GaussianProcesses:String
weka.classifiers.functions.LinearRegression:String
weka.classifiers.functions.Logistic:String
weka.classifiers.functions.MultilayerPerceptron:String
weka.classifiers.functions.SGD:String
weka.classifiers.functions.SMO:String
weka.classifiers.functions.SMOreg:String
weka.classifiers.functions.SimpleLinearRegression:String
weka.classifiers.functions.SimpleLogistic:String
weka.classifiers.functions.VotedPerceptron:String
weka.classifiers.functions.supportVector.NormalizedPolyKernel:String
weka.classifiers.functions.supportVector.PolyKernel:String
weka.classifiers.functions.supportVector.Puk:String
weka.classifiers.functions.supportVector.RBFKernel:String
weka.classifiers.functions.supportVector.RegSMOImproved:String
weka.classifiers.lazy.IBk:String
weka.classifiers.lazy.KStar:String
weka.classifiers.lazy.LWL:String
weka.classifiers.meta.AdaBoostM1:String
weka.classifiers.meta.AdditiveRegression:String
weka.classifiers.meta.AttributeSelectedClassifier:String
weka.classifiers.meta.Bagging:String
weka.classifiers.meta.RandomCommittee:String
weka.classifiers.meta.RandomSubSpace:String
weka.classifiers.meta.Stacking:String
weka.classifiers.meta.Vote:String
weka.classifiers.rules.DecisionTable:String
weka.classifiers.rules.JRip:String
weka.classifiers.rules.M5Rules:String
weka.classifiers.rules.OneR:String
weka.classifiers.rules.PART:String
weka.classifiers.rules.ZeroR:String
weka.classifiers.trees.DecisionStump:String
weka.classifiers.trees.J48:String
weka.classifiers.trees.LMT:String
weka.classifiers.trees.M5P:String
weka.classifiers.trees.REPTree:String
weka.classifiers.trees.RandomForest:String
weka.classifiers.trees.RandomTree:String
weka.core.neighboursearch.LinearNNSearch:String


[Constants]


null:String

noDataPreprocessing:String

noFeaturePreprocessing:String

eval:String
search:String

hidden:String
visible:String

baseForEnsemble:String
kernel:String
optimizer:String
baseForMeta:String



[Types]


Number;
Value;
Instances;
String;
List<String>;
Array<String>;




[Services]


### Helper Services ###

noop; ; ; ; ; (0)

assignTo; value:String; variable:String; ; assigned(value,variable); (0)
setLocal; cn:String, cnLocal:String, i:Number, type:String; ; ; hasLocal(cn,i,type) & isLocal(cn,cnLocal,i,type); (0)

getOptionList; name:String, i:Number, type:String; list:List<String>; ; List<String>(list) & ListContext(name,i,list,type); (0)

setActive; cn:String; ; ; Active(cn); (0)
setStopped; cn:String; ; ; Stopped(cn); (0)
initValueList; cn:String, pn:String, lb:String, ub:String, d:String, t:String, x:Number, i:Number; o:List<String>; ; Active(cn,pn) & List<String>(o) & ValueContext(cn,pn,lb,ub,d,t,x,i) & ValueList(cn,pn,o) & Step(cn,pn,i); (0)
continueParamRefine; cn:String, pn:String, i:Number,j:Number; ; ; Used(cn,pn,i) & Step(cn,pn,j); (0)
stopParamRefine; cn:String, pn:String, i:Number; ; ; Used(cn,pn,i) & StoppedParam(cn,pn); (0)
computeValue; vList:List<String>, lb:String, ub:String, d:String, t:String, x:Number, i:Number; pv:Number; ; ; (0)

addSingleParam; oList:List<String>, p:String; ; List<String>(oList); in(oList, p); (0)
noaddSingleParam; oList:List<String>, p:String; ; List<String>(oList); notin(oList, p); (0)
addValuedParam; oList:List<String>, p:String, v:Value; ; List<String>(oList); in(oList, p) & optVal(oList,p,v); (0)
noaddValuedParam; oList:List<String>, p:String, v:Value; ; List<String>(oList); notin(oList, p) & optVal(oList,p,v); (0)

concatenateWithName; cn:String, oLocal:List<String>; param:String; List<String>(oLocal); String(param); (0)
concatenate; oLocal:List<String>; param:String; List<String>(oLocal); String(param); (0)
appendOptions; l1:List<String>, l2:List<String>; ; List<String>(l1) & List<String>(l2); appended(l1,l2); (0)

compileOptionListToArray; oList:List<String>; oArray:String[]; List<String>(oList); String[](oArray); (0)


### FEATURE PREPROCESSING ###



# GENERIC FILTER CONSTRUCTION AND APPLICATION

weka.attributeSelection.AttributeSelection:__construct; ; as; ; FeatureSelectionFilter(as); (0)
weka.attributeSelection.AttributeSelection:setEvaluator; as,fe; ; FeatureSelectionFilter(as) & FeatureEvaluator(fe); evalSet(as,fe);(0)
weka.attributeSelection.AttributeSelection:setSearch; as,fs; ; FeatureSelectionFilter(as) & FeatureSearcher(fs); searchSet(as,fs); (0)

# FEATURE SELECTION EVALUATOR

weka.attributeSelection.CfsSubsetEval:__construct; ; e; ; FeatureEvaluator(e);(0)
weka.attributeSelection.CfsSubsetEval:setOptions; e,o; ; FeatureEvaluator(e) & String[](o); optSet(e); (0)

# FEATURE SELECTION SEARCH

weka.attributeSelection.BestFirst:__construct; ; s; ; FeatureSearcher(s); (0)
weka.attributeSelection.BestFirst:setOptions; s,o; ; FeatureSearcher(s) & String[](o); optSet(s); (0)
weka.attributeSelection.GreedyStepwise:__construct; ; s; ; FeatureSearcher(s); (0)
weka.attributeSelection.GreedyStepwise:setOptions; s,o; ; FeatureSearcher(s) & String[](o); optSet(s); (0)


### CLASSIFIER INITIALIZATION ###



# BASE CLASSIFIER

weka.classifiers.bayes.BayesNet:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.bayes.BayesNet:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.bayes.NaiveBayes:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.bayes.NaiveBayes:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.bayes.NaiveBayesMultinomial:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.bayes.NaiveBayesMultinomial:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.GaussianProcesses:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.GaussianProcesses:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.LinearRegression:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.LinearRegression:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.Logistic:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.Logistic:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.MultilayerPerceptron:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.MultilayerPerceptron:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.SGD:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.SGD:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.SimpleLinearRegression:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.SimpleLinearRegression:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.SimpleLogistic:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.SimpleLogistic:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.SMO:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.SMO:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.SMOreg:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.SMOreg:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.functions.VotedPerceptron:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.functions.VotedPerceptron:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.lazy.IBk:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.lazy.IBk:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.lazy.KStar:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.lazy.KStar:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.DecisionTable:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.DecisionTable:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.JRip:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.JRip:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.M5Rules:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.M5Rules:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.OneR:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.OneR:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.PART:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.PART:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.rules.ZeroR:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.rules.ZeroR:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.DecisionStump:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.DecisionStump:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.J48:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.J48:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.LMT:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.LMT:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.M5P:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.M5P:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.RandomForest:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.RandomForest:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.RandomTree:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.RandomTree:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.trees.REPTree:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.trees.REPTree:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)

# META CLASSIFIER

weka.classifiers.lazy.LWL:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.lazy.LWL:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.AdaBoostM1:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.AdaBoostM1:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.AdditiveRegression:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.AdditiveRegression:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.AttributeSelectedClassifier:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.AttributeSelectedClassifier:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.Bagging:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.Bagging:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.RandomCommittee:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.RandomCommittee:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.RandomSubSpace:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.RandomSubSpace:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)

# ENSEMBLE CLASSIFIER

weka.classifiers.meta.Stacking:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.Stacking:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)
weka.classifiers.meta.Vote:__construct; ; c; ; Classifier(c); (0)
weka.classifiers.meta.Vote:setOptions; c,o; ; Classifier(c) & String[](o); optSet(c); (0)




[Methods]



### Helper Methods ###

# add optional parameters to parameter list
addOptionalParameterNo; addOptParam(o,p); o,p; ; ; noaddSingleParam(o,p)
addOptionalParameterYes; addOptParam(o,p); o,p; ; ; addSingleParam(o,p)
addOptionalValuedParameterNo; addOptValuedParam(o,p,v); o,p,v; ; ; noaddValuedParam(o,p,v)
addOptionalValuedParameterYes; addOptValuedParam(o,p,v); o,p,v; ; ; addValuedParam(o,p,v)

# add mandatory parameters to parameter list
addMandatoryParameter; addMandatParam(o,p); o,p; ; ; addSingleParam(o,p)
addMandatoryValuedParameter; addMandatValuedParam(o,p,v); o,p,v; ; ; addValuedParam(o,p,v)


### MAIN METHODS ###

inductionMethod; induce(x); x,d,as,c; ; ; createDataPreprocessor(d) -> createFeaturePreprocessor(as) -> createClassifier(c)
# Alternative: Parametrize feature preprocessor after selecting classifier.
# inductionMethod; induce(x); x,d,fsn,fs,fen,fe,as,cn,c; ; ; createDataPreprocessor(d) -> wekaCreatePureFeatureSelector(asn,as) -> wekaCreatePureClassifier(cn,c) -> wekaParametrizeProcesses(asn,cn) -> wekaFinalizeFeatureSelector(asn,as) -> wekaFinalizeClassifier(cn,c)

### DATA PREPROCESSORS ###

# No preprocessing

createDataPreprocessor; createDataPreprocessor(d); d; ; ; assignTo('noDataPreprocessing',d)

### FEATURE PREPROCESSORS ###

# No preprocessing

createFeaturePreprocessor; createFeaturePreprocessor(as); as; ; ; assignTo('noFeaturePreprocessing',as)


### Weka Entry METHODS ###

# Weka Feature Selection

createFeaturePreprocessor; createFeaturePreprocessor(as); as; ; ; wekaCreateFeaturePreprocessor(as)

wekaCreateFeaturePreprocessor; wekaCreateFeaturePreprocessor(as); asn,as; ; ; wekaCreatePureFeatureSelector(asn,as) -> wekaParametrizeProcess(asn) -> wekaFinalizeFeatureSelector(asn,as)

# NO PARAMETRIZATION Just for testing! Replaces previous line.
#wekaCreateFeaturePreprocessor; wekaCreateFeaturePreprocessor(as); asn,as; ; ; wekaCreatePureFeatureSelector(asn,as) -> wekaInitializeParameterLists(asn) -> wekaCombineParameterLists(asn) -> wekaFinalizeFeatureSelector(asn,as)

WRCPISclass.attributeSelection.AttributeSelection; wekaRefineCardinalParametersTestStopped(asn); asn,fsn,fen; assigned('AttributeSelection',asn) & isLocal(asn,fsn,'0','search') & isLocal(asn,fen,'0','eval'); ; wekaRefineCardinalParametersTestStopped(fsn) -> wekaRefineCardinalParametersTestStopped(fen)



### Weka Classifier Construction

createClassifier; createClassifier(c); c; ; ; wekaCreateClassifier(c)

# Weka Classifier Construction

wekaCreateClassifier; wekaCreateClassifier(c); cn,c; ; ; wekaCreatePureClassifier(cn,c) -> wekaParametrizeProcess(cn) -> wekaFinalizeClassifier(cn,c)

# NO PARAMETRIZATION Just for testing! Replaces previous line.
#wekaCreateClassifier; wekaCreateClassifier(c); cn,c; ; ; wekaCreatePureClassifier(cn,c) -> wekaInitializeParameterLists(cn) -> wekaCombineParameterLists(cn) -> wekaFinalizeClassifier(cn,c)

# Weka General Method (single vs. meta vs. ensemble)

wekaCreatePureClassifier; wekaCreatePureClassifier(cn,c); cn,c; ; ; wekaCreatePureBaseClassifier(cn,c)
wekaCreatePureClassifier; wekaCreatePureClassifier(cn,c); cn,c; ; ; wekaCreatePureMetaClassifier(cn,c)
wekaCreatePureClassifier; wekaCreatePureClassifier(cn,c); cn,c; ; ; wekaCreatePureEnsembleClassifier(cn,c)

# Weka Parametrization Methods

wekaParametrizeProcess; wekaParametrizeProcess(cn); cn; ; ; wekaParametrizeProcessPartOne(cn) -> wekaRefineCardinalParameters(cn) -> wekaParametrizeProcessPartTwo(cn)
wekaParametrizeProcesses; wekaParametrizeProcesses(asn,cn); asn,cn; ; ; wekaParametrizeProcessPartOne(asn) -> wekaParametrizeProcessPartOne(cn) -> wekaCombinedRefineCardinalParameters(asn,cn) -> wekaParametrizeProcessPartTwo(asn) -> wekaParametrizeProcessPartTwo(cn)
wekaParametrizeProcessPartOne; wekaParametrizeProcessPartOne(cn); cn; ; ; wekaInitializeParameterLists(cn) -> wekaSetHiddenParameters(cn) -> wekaSetCategoricalParameters(cn) -> wekaInitializeCardinalParameters(cn)
wekaParametrizeProcessPartTwo; wekaParametrizeProcessPartTwo(cn); cn; ; ; wekaSetCardinalParameters(cn) -> wekaCombineParameterLists(cn)

wekaInitializeLists; wekaInitializeParameterLists(cn); cn; ; ; wekaInitializeNumParameterLists(cn,'0')

wekaRefineCardinalParameters; wekaRefineCardinalParameters(cn); cn; Active(cn) & !Stopped(cn); ; wekaSingleRefineCardinalParameters(cn) -> wekaRefineCardinalParameters(cn)
wekaRefineCardinalParameters; wekaRefineCardinalParameters(cn); cn; Stopped(cn); ; noop

wekaRefine; refineCardinalParameter(cn,pn); cn,pn,valueList,i,j,r,lb,ub,d,t,x,i0; Active(cn,pn) & ValueList(cn,pn,valueList) & Step(cn,pn,i) & !Used(cn,pn,i) & Predecessor(i,j) & Refinement(r) & ValueContext(cn,pn,lb,ub,d,t,x,i0);  ; continueParamRefine(cn,pn,i,j) -> checkParamRefine(cn,pn) -> addMandatParam(valueList,r)
wekaRefine; refineCardinalParameter(cn,pn); cn,pn,valueList,i,j,r,lb,ub,d,t,x,i0; Active(cn,pn) & ValueList(cn,pn,valueList) & Step(cn,pn,i) & !Used(cn,pn,i) & !StoppedParam(cn,pn) & ValueContext(cn,pn,lb,ub,d,t,x,i0); ; stopParamRefine(cn,pn,i)
wekaRefine; refineCardinalParameter(cn,pn); cn,pn; Active(cn,pn) & StoppedParam(cn,pn); ; noop
wekaRefine; refineCardinalParameter(cn,pn); cn,pn; !Active(cn,pn); ; noop
wekaRefine; checkParamRefine(cn,pn); cn,pn; Step(cn,pn,'0'); ; stopParamRefine(cn,pn,'0')
wekaRefine; checkParamRefine(cn,pn); cn,pn; !Step(cn,pn,'0'); ; noop

wekaCompute; setCardinalParameter(cn,pn,paramList); cn,pn,paramList,pv,valueList,lb,ub,d,t,x,i; Active(cn,pn) & ValueList(cn,pn,valueList) & ValueContext(cn,pn,lb,ub,d,t,x,i); ; computeValue(valueList,lb,ub,d,t,x,i,pv) -> addMandatValuedParam(paramList,pn,pv)
wekaCompute; setCardinalParameter(cn,pn,paramList); cn,pn,paramList; !Active(cn,pn); ; noop



# ATTRIBUTE SELECTORS

# weka.attributeSelection.BestFirst
WSSSclass.weka.attributeSelection.BestFirst; wekaSelectSubsetSearch(fsn,fs); fsn,fs;; ; assignTo('weka.attributeSelection.BestFirst',fsn) -> weka.attributeSelection.BestFirst:__construct(fs)
WFSSclass.weka.attributeSelection.BestFirst; wekaFinalizeFeatureSearch(fsn,fs); fsn,fs,paramList,paramArray; assigned('weka.attributeSelection.BestFirst',fsn) & ListContext(fsn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.attributeSelection.BestFirst:setOptions(fs,paramArray)
WIPLclass.weka.attributeSelection.BestFirst; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.attributeSelection.BestFirst',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.attributeSelection.BestFirst.initializeSubLists0(cn)
WSHPclass.weka.attributeSelection.BestFirst; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.BestFirst',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.BestFirst.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.attributeSelection.BestFirst; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.attributeSelection.BestFirst',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.BestFirst.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.attributeSelection.BestFirst; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.BestFirst',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.BestFirst.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.attributeSelection.BestFirst; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.attributeSelection.BestFirst',cn); ; weka.attributeSelection.BestFirst.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.attributeSelection.BestFirst; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.BestFirst',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.attributeSelection.BestFirst; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.BestFirst',cn) & !Stopped(cn); ; weka.attributeSelection.BestFirst.cardinalRefineTestStopped0(cn)
WCCVclass.weka.attributeSelection.BestFirst; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.attributeSelection.BestFirst',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.BestFirst.cardinalCompute0(cn,paramList)
WCPLclass.weka.attributeSelection.BestFirst; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.attributeSelection.BestFirst',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.BestFirst.combineLists0(cn,paramList)
sL0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.selectLocals0(cn); cn; ; ; noop
iS0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-D', '0') -> weka.attributeSelection.BestFirst.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-D', '1') -> weka.attributeSelection.BestFirst.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-D', '2') -> weka.attributeSelection.BestFirst.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-N','2.0','10.0','5.0','INTEGER','0','1',valueList) -> weka.attributeSelection.BestFirst.cardinalConfig1(cn,hiddenList)
nC1class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-N') -> weka.attributeSelection.BestFirst.cardinalRefine1(cn)
rC1class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-N'); ; weka.attributeSelection.BestFirst.cardinalRefineTestStopped1(cn)
tS0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-N'); ; noop
rS1class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-N',paramList) -> weka.attributeSelection.BestFirst.cardinalCompute1(cn,paramList)
cV1class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.attributeSelection.BestFirst; weka.attributeSelection.BestFirst.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.attributeSelection.GreedyStepwise
WSSSclass.weka.attributeSelection.GreedyStepwise; wekaSelectSubsetSearch(fsn,fs); fsn,fs;; ; assignTo('weka.attributeSelection.GreedyStepwise',fsn) -> weka.attributeSelection.GreedyStepwise:__construct(fs)
WFSSclass.weka.attributeSelection.GreedyStepwise; wekaFinalizeFeatureSearch(fsn,fs); fsn,fs,paramList,paramArray; assigned('weka.attributeSelection.GreedyStepwise',fsn) & ListContext(fsn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.attributeSelection.GreedyStepwise:setOptions(fs,paramArray)
WIPLclass.weka.attributeSelection.GreedyStepwise; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.attributeSelection.GreedyStepwise',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.attributeSelection.GreedyStepwise.initializeSubLists0(cn)
WSHPclass.weka.attributeSelection.GreedyStepwise; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.GreedyStepwise',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.GreedyStepwise.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.attributeSelection.GreedyStepwise; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.attributeSelection.GreedyStepwise',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.GreedyStepwise.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.attributeSelection.GreedyStepwise; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.GreedyStepwise',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.GreedyStepwise.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.attributeSelection.GreedyStepwise; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.attributeSelection.GreedyStepwise',cn); ; weka.attributeSelection.GreedyStepwise.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.attributeSelection.GreedyStepwise; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.GreedyStepwise',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.attributeSelection.GreedyStepwise; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.GreedyStepwise',cn) & !Stopped(cn); ; weka.attributeSelection.GreedyStepwise.cardinalRefineTestStopped0(cn)
WCCVclass.weka.attributeSelection.GreedyStepwise; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.attributeSelection.GreedyStepwise',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.GreedyStepwise.cardinalCompute0(cn,paramList)
WCPLclass.weka.attributeSelection.GreedyStepwise; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.attributeSelection.GreedyStepwise',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.GreedyStepwise.combineLists0(cn,paramList)
sL0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.selectLocals0(cn); cn; ; ; noop
iS0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-C') -> weka.attributeSelection.GreedyStepwise.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-B') -> weka.attributeSelection.GreedyStepwise.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.attributeSelection.GreedyStepwise.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'2_R_REMOVE_PREV'); ; initValueList(cn,'-N','10.0','1000.0','30.0','LOG_INTEGER','0','3',valueList) -> weka.attributeSelection.GreedyStepwise.cardinalConfig1(cn,hiddenList)
nC0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'2_R_REMOVE_PREV'); ; stopParamRefine(cn, '-N','0') -> weka.attributeSelection.GreedyStepwise.cardinalConfig1(cn,hiddenList)
nC1class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-N') -> weka.attributeSelection.GreedyStepwise.cardinalRefine1(cn)
rC1class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-N'); ; weka.attributeSelection.GreedyStepwise.cardinalRefineTestStopped1(cn)
tS0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-N'); ; noop
rS1class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-N',paramList) -> weka.attributeSelection.GreedyStepwise.cardinalCompute1(cn,paramList)
cV1class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.attributeSelection.GreedyStepwise; weka.attributeSelection.GreedyStepwise.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.attributeSelection.CfsSubsetEval
WSSEclass.weka.attributeSelection.CfsSubsetEval; wekaSelectSubsetEvaluator(fen,fe); fen,fe; ; ; assignTo('weka.attributeSelection.CfsSubsetEval',fen) -> weka.attributeSelection.CfsSubsetEval:__construct(fe)
WFIEclass.weka.attributeSelection.CfsSubsetEval; wekaFinalizeFeatureEvaluator(fen,fe); fen,fe,paramList,paramArray; assigned('weka.attributeSelection.CfsSubsetEval',fen) & ListContext(fen,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.attributeSelection.CfsSubsetEval:setOptions(fe,paramArray)
WIPLclass.weka.attributeSelection.CfsSubsetEval; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.attributeSelection.CfsSubsetEval',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.attributeSelection.CfsSubsetEval.initializeSubLists0(cn)
WSHPclass.weka.attributeSelection.CfsSubsetEval; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.CfsSubsetEval',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.CfsSubsetEval.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.attributeSelection.CfsSubsetEval; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.attributeSelection.CfsSubsetEval',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.CfsSubsetEval.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.attributeSelection.CfsSubsetEval; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.attributeSelection.CfsSubsetEval',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.attributeSelection.CfsSubsetEval.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.attributeSelection.CfsSubsetEval; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.attributeSelection.CfsSubsetEval',cn); ; weka.attributeSelection.CfsSubsetEval.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.attributeSelection.CfsSubsetEval; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.CfsSubsetEval',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.attributeSelection.CfsSubsetEval; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.attributeSelection.CfsSubsetEval',cn) & !Stopped(cn); ; weka.attributeSelection.CfsSubsetEval.cardinalRefineTestStopped0(cn)
WCCVclass.weka.attributeSelection.CfsSubsetEval; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.attributeSelection.CfsSubsetEval',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.CfsSubsetEval.cardinalCompute0(cn,paramList)
WCPLclass.weka.attributeSelection.CfsSubsetEval; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.attributeSelection.CfsSubsetEval',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.attributeSelection.CfsSubsetEval.combineLists0(cn,paramList)
sL0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.selectLocals0(cn); cn; ; ; noop
iS0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-M') -> weka.attributeSelection.CfsSubsetEval.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-L') -> weka.attributeSelection.CfsSubsetEval.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.attributeSelection.CfsSubsetEval; weka.attributeSelection.CfsSubsetEval.combineLists0(cn,paramList); cn,paramList; ; ; noop

# KERNEL FUNCTIONS


# OPTIMIZER FUNCTIONS


# BASE CLASSIFIER

# weka.classifiers.bayes.BayesNet
WCBCclass.weka.classifiers.bayes.BayesNet; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.bayes.BayesNet',cn) -> weka.classifiers.bayes.BayesNet:__construct(c) -> weka.classifiers.bayes.BayesNet.selectLocals0(cn)
WSBCclass.weka.classifiers.bayes.BayesNet; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.bayes.BayesNet',cn) -> weka.classifiers.bayes.BayesNet.selectLocals0(cn)
WFBCclass.weka.classifiers.bayes.BayesNet; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.bayes.BayesNet:setOptions(c,paramArray)
WIPLclass.weka.classifiers.bayes.BayesNet; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.bayes.BayesNet',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.bayes.BayesNet.initializeSubLists0(cn)
WSHPclass.weka.classifiers.bayes.BayesNet; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.BayesNet.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.bayes.BayesNet; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.BayesNet.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.bayes.BayesNet; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.BayesNet.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.bayes.BayesNet; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.bayes.BayesNet',cn); ; weka.classifiers.bayes.BayesNet.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.bayes.BayesNet; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.BayesNet',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.bayes.BayesNet; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.BayesNet',cn) & !Stopped(cn); ; weka.classifiers.bayes.BayesNet.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.bayes.BayesNet; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.BayesNet.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.bayes.BayesNet; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.bayes.BayesNet',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.BayesNet.combineLists0(cn,paramList)
sL0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-D') -> weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.K2') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.HillClimber') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.LAGDHillClimber') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.SimulatedAnnealing') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.TabuSearch') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-Q', 'weka.classifiers.bayes.net.search.local.TAN') -> weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.bayes.BayesNet; weka.classifiers.bayes.BayesNet.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.bayes.NaiveBayes
WCBCclass.weka.classifiers.bayes.NaiveBayes; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.bayes.NaiveBayes',cn) -> weka.classifiers.bayes.NaiveBayes:__construct(c) -> weka.classifiers.bayes.NaiveBayes.selectLocals0(cn)
WSBCclass.weka.classifiers.bayes.NaiveBayes; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.bayes.NaiveBayes',cn) -> weka.classifiers.bayes.NaiveBayes.selectLocals0(cn)
WFBCclass.weka.classifiers.bayes.NaiveBayes; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.bayes.NaiveBayes:setOptions(c,paramArray)
WIPLclass.weka.classifiers.bayes.NaiveBayes; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.bayes.NaiveBayes',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.bayes.NaiveBayes.initializeSubLists0(cn)
WSHPclass.weka.classifiers.bayes.NaiveBayes; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.NaiveBayes.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.bayes.NaiveBayes; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayes.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.bayes.NaiveBayes; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.NaiveBayes.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.bayes.NaiveBayes; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.bayes.NaiveBayes',cn); ; weka.classifiers.bayes.NaiveBayes.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.bayes.NaiveBayes; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.NaiveBayes',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.bayes.NaiveBayes; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.NaiveBayes',cn) & !Stopped(cn); ; weka.classifiers.bayes.NaiveBayes.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.bayes.NaiveBayes; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayes.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.bayes.NaiveBayes; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.bayes.NaiveBayes',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayes.combineLists0(cn,paramList)
sL0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'D_REMOVE_PREV'); ; addOptParam(paramList, '-K') -> weka.classifiers.bayes.NaiveBayes.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'D_REMOVE_PREV'); ; weka.classifiers.bayes.NaiveBayes.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-D') -> weka.classifiers.bayes.NaiveBayes.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.bayes.NaiveBayes; weka.classifiers.bayes.NaiveBayes.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.bayes.NaiveBayesMultinomial
WCBCclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.bayes.NaiveBayesMultinomial',cn) -> weka.classifiers.bayes.NaiveBayesMultinomial:__construct(c) -> weka.classifiers.bayes.NaiveBayesMultinomial.selectLocals0(cn)
WSBCclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.bayes.NaiveBayesMultinomial',cn) -> weka.classifiers.bayes.NaiveBayesMultinomial.selectLocals0(cn)
WFBCclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.bayes.NaiveBayesMultinomial:setOptions(c,paramArray)
WIPLclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.bayes.NaiveBayesMultinomial.initializeSubLists0(cn)
WSHPclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.NaiveBayesMultinomial.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayesMultinomial.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn); ; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.bayes.NaiveBayesMultinomial; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & !Stopped(cn); ; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.bayes.NaiveBayesMultinomial; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.bayes.NaiveBayesMultinomial',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.bayes.NaiveBayesMultinomial.combineLists0(cn,paramList)
sL0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.bayes.NaiveBayesMultinomial; weka.classifiers.bayes.NaiveBayesMultinomial.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.GaussianProcesses
WCBCclass.weka.classifiers.functions.GaussianProcesses; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.GaussianProcesses',cn) -> weka.classifiers.functions.GaussianProcesses:__construct(c) -> weka.classifiers.functions.GaussianProcesses.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.GaussianProcesses; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.GaussianProcesses',cn) -> weka.classifiers.functions.GaussianProcesses.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.GaussianProcesses; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.GaussianProcesses:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.GaussianProcesses; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.GaussianProcesses',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.GaussianProcesses.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.GaussianProcesses; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.GaussianProcesses.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.GaussianProcesses; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.GaussianProcesses.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.GaussianProcesses; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.GaussianProcesses.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.GaussianProcesses; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.GaussianProcesses',cn); ; weka.classifiers.functions.GaussianProcesses.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.GaussianProcesses; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.GaussianProcesses',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.GaussianProcesses; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.GaussianProcesses',cn) & !Stopped(cn); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.GaussianProcesses; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.GaussianProcesses.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.GaussianProcesses; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.GaussianProcesses',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.GaussianProcesses.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '0') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '1') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '2') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.NormalizedPolyKernel') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.PolyKernel') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.Puk') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.RBFKernel') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; weka.classifiers.functions.GaussianProcesses.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig4(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; weka.classifiers.functions.GaussianProcesses.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatParam(paramList, '-END') -> weka.classifiers.functions.GaussianProcesses.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-L','1.0E-4','1.0','0.1','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.GaussianProcesses.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.GaussianProcesses.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-S','0.1','10.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig4(cn,hiddenList)
nC3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-S','0') -> weka.classifiers.functions.GaussianProcesses.cardinalConfig4(cn,hiddenList)
nC4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-O','0.1','1.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig5(cn,hiddenList)
nC4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-O','0') -> weka.classifiers.functions.GaussianProcesses.cardinalConfig5(cn,hiddenList)
nC5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; initValueList(cn,'-C','1.0E-4','1.0','0.01','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.GaussianProcesses.cardinalConfig6(cn,hiddenList)
nC5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'1_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; stopParamRefine(cn, '-C','0') -> weka.classifiers.functions.GaussianProcesses.cardinalConfig6(cn,hiddenList)
nC6class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalConfig6(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-L') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine3(cn)
rC3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine3(cn); cn; ; ; refineCardinalParameter(cn,'-S') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine4(cn)
rC4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine4(cn); cn; ; ; refineCardinalParameter(cn,'-O') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine5(cn)
rC5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine5(cn); cn; ; ; refineCardinalParameter(cn,'-C') -> weka.classifiers.functions.GaussianProcesses.cardinalRefine6(cn)
rC6class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefine6(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-L'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-L'); ; noop
tS1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped3(cn); cn; StoppedParam(cn,'-S'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped4(cn)
tS3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped3(cn); cn; !StoppedParam(cn,'-S'); ; noop
tS4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped4(cn); cn; StoppedParam(cn,'-O'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped5(cn)
tS4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped4(cn); cn; !StoppedParam(cn,'-O'); ; noop
tS5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped5(cn); cn; StoppedParam(cn,'-C'); ; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped6(cn)
tS5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped5(cn); cn; !StoppedParam(cn,'-C'); ; noop
rS6class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalRefineTestStopped6(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-L',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute3(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-S',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute4(cn,paramList)
cV4class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute4(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-O',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute5(cn,paramList)
cV5class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute5(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-C',paramList) -> weka.classifiers.functions.GaussianProcesses.cardinalCompute6(cn,paramList)
cV6class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.cardinalCompute6(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.GaussianProcesses; weka.classifiers.functions.GaussianProcesses.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.LinearRegression
WCBCclass.weka.classifiers.functions.LinearRegression; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.LinearRegression',cn) -> weka.classifiers.functions.LinearRegression:__construct(c) -> weka.classifiers.functions.LinearRegression.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.LinearRegression; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.LinearRegression',cn) -> weka.classifiers.functions.LinearRegression.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.LinearRegression; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.LinearRegression:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.LinearRegression; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.LinearRegression',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.LinearRegression.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.LinearRegression; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.LinearRegression.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.LinearRegression; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.LinearRegression.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.LinearRegression; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.LinearRegression.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.LinearRegression; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.LinearRegression',cn); ; weka.classifiers.functions.LinearRegression.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.LinearRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.LinearRegression',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.LinearRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.LinearRegression',cn) & !Stopped(cn); ; weka.classifiers.functions.LinearRegression.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.LinearRegression; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.LinearRegression.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.LinearRegression; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.LinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.LinearRegression.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '0') -> weka.classifiers.functions.LinearRegression.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.functions.LinearRegression.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '2') -> weka.classifiers.functions.LinearRegression.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-C') -> weka.classifiers.functions.LinearRegression.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-R','1.0E-7','10.0','1.0E-7','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.LinearRegression.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-R') -> weka.classifiers.functions.LinearRegression.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-R'); ; weka.classifiers.functions.LinearRegression.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-R'); ; noop
rS1class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-R',paramList) -> weka.classifiers.functions.LinearRegression.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.LinearRegression; weka.classifiers.functions.LinearRegression.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.Logistic
WCBCclass.weka.classifiers.functions.Logistic; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.Logistic',cn) -> weka.classifiers.functions.Logistic:__construct(c) -> weka.classifiers.functions.Logistic.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.Logistic; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.Logistic',cn) -> weka.classifiers.functions.Logistic.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.Logistic; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.Logistic:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.Logistic; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.Logistic',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.Logistic.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.Logistic; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.Logistic.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.Logistic; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.Logistic.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.Logistic; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.Logistic.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.Logistic; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.Logistic',cn); ; weka.classifiers.functions.Logistic.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.Logistic; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.Logistic',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.Logistic; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.Logistic',cn) & !Stopped(cn); ; weka.classifiers.functions.Logistic.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.Logistic; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.Logistic.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.Logistic; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.Logistic',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.Logistic.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-R','1.0E-12','10.0','1.0E-7','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.Logistic.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-R') -> weka.classifiers.functions.Logistic.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-R'); ; weka.classifiers.functions.Logistic.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-R'); ; noop
rS1class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-R',paramList) -> weka.classifiers.functions.Logistic.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.Logistic; weka.classifiers.functions.Logistic.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.MultilayerPerceptron
WCBCclass.weka.classifiers.functions.MultilayerPerceptron; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.MultilayerPerceptron',cn) -> weka.classifiers.functions.MultilayerPerceptron:__construct(c) -> weka.classifiers.functions.MultilayerPerceptron.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.MultilayerPerceptron; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.MultilayerPerceptron',cn) -> weka.classifiers.functions.MultilayerPerceptron.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.MultilayerPerceptron; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.MultilayerPerceptron:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.MultilayerPerceptron; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.MultilayerPerceptron.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.MultilayerPerceptron; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.MultilayerPerceptron.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.MultilayerPerceptron; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.MultilayerPerceptron; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.MultilayerPerceptron.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.MultilayerPerceptron; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.MultilayerPerceptron',cn); ; weka.classifiers.functions.MultilayerPerceptron.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.MultilayerPerceptron; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.MultilayerPerceptron; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & !Stopped(cn); ; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.MultilayerPerceptron; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.MultilayerPerceptron.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.MultilayerPerceptron; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.MultilayerPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.MultilayerPerceptron.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-B') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-H', 'a') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-H', 'i') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-H', 'o') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-H', 't') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-C') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-D') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.functions.MultilayerPerceptron.categoricalConfig6(cn,paramList,hiddenList)
cC6class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-L','0.1','1.0','0.3','NUMERIC','0','3',valueList) -> weka.classifiers.functions.MultilayerPerceptron.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','0.1','1.0','0.2','NUMERIC','0','3',valueList) -> weka.classifiers.functions.MultilayerPerceptron.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-L') -> weka.classifiers.functions.MultilayerPerceptron.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.functions.MultilayerPerceptron.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-L'); ; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-L'); ; noop
tS1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-M'); ; noop
rS2class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-L',paramList) -> weka.classifiers.functions.MultilayerPerceptron.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.functions.MultilayerPerceptron.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.MultilayerPerceptron; weka.classifiers.functions.MultilayerPerceptron.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.SGD
WCBCclass.weka.classifiers.functions.SGD; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.SGD',cn) -> weka.classifiers.functions.SGD:__construct(c) -> weka.classifiers.functions.SGD.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.SGD; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.SGD',cn) -> weka.classifiers.functions.SGD.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.SGD; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.SGD:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.SGD; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.SGD',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.SGD.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.SGD; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SGD.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.SGD; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SGD.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.SGD; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SGD.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.SGD; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.SGD',cn); ; weka.classifiers.functions.SGD.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.SGD; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SGD',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.SGD; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SGD',cn) & !Stopped(cn); ; weka.classifiers.functions.SGD.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.SGD; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SGD.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.SGD; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.SGD',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SGD.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-F', '0') -> weka.classifiers.functions.SGD.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-F', '1') -> weka.classifiers.functions.SGD.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-F', '2') -> weka.classifiers.functions.SGD.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-N') -> weka.classifiers.functions.SGD.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-M') -> weka.classifiers.functions.SGD.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-L','1.0E-5','0.1','0.01','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.SGD.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-R','1.0E-12','10.0','1.0E-4','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.SGD.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-L') -> weka.classifiers.functions.SGD.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-R') -> weka.classifiers.functions.SGD.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-L'); ; weka.classifiers.functions.SGD.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-L'); ; noop
tS1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-R'); ; weka.classifiers.functions.SGD.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-R'); ; noop
rS2class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-L',paramList) -> weka.classifiers.functions.SGD.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-R',paramList) -> weka.classifiers.functions.SGD.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.SGD; weka.classifiers.functions.SGD.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.SimpleLinearRegression
WCBCclass.weka.classifiers.functions.SimpleLinearRegression; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.SimpleLinearRegression',cn) -> weka.classifiers.functions.SimpleLinearRegression:__construct(c) -> weka.classifiers.functions.SimpleLinearRegression.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.SimpleLinearRegression; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.SimpleLinearRegression',cn) -> weka.classifiers.functions.SimpleLinearRegression.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.SimpleLinearRegression; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.SimpleLinearRegression:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.SimpleLinearRegression; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.SimpleLinearRegression.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.SimpleLinearRegression; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SimpleLinearRegression.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.SimpleLinearRegression; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLinearRegression.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.SimpleLinearRegression; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SimpleLinearRegression.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.SimpleLinearRegression; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.SimpleLinearRegression',cn); ; weka.classifiers.functions.SimpleLinearRegression.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.SimpleLinearRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.SimpleLinearRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & !Stopped(cn); ; weka.classifiers.functions.SimpleLinearRegression.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.SimpleLinearRegression; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLinearRegression.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.SimpleLinearRegression; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.SimpleLinearRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLinearRegression.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.SimpleLinearRegression; weka.classifiers.functions.SimpleLinearRegression.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.SimpleLogistic
WCBCclass.weka.classifiers.functions.SimpleLogistic; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.SimpleLogistic',cn) -> weka.classifiers.functions.SimpleLogistic:__construct(c) -> weka.classifiers.functions.SimpleLogistic.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.SimpleLogistic; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.SimpleLogistic',cn) -> weka.classifiers.functions.SimpleLogistic.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.SimpleLogistic; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.SimpleLogistic:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.SimpleLogistic; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.SimpleLogistic',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.SimpleLogistic.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.SimpleLogistic; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SimpleLogistic.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.SimpleLogistic; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLogistic.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.SimpleLogistic; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SimpleLogistic.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.SimpleLogistic; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.SimpleLogistic',cn); ; weka.classifiers.functions.SimpleLogistic.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.SimpleLogistic; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SimpleLogistic',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.SimpleLogistic; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SimpleLogistic',cn) & !Stopped(cn); ; weka.classifiers.functions.SimpleLogistic.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.SimpleLogistic; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLogistic.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.SimpleLogistic; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.SimpleLogistic',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SimpleLogistic.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'W_HIDDEN_0') -> weka.classifiers.functions.SimpleLogistic.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'W_HIDDEN_1') -> weka.classifiers.functions.SimpleLogistic.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-S') -> weka.classifiers.functions.SimpleLogistic.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'W_HIDDEN_0'); ; addMandatValuedParam(paramList, '-W', '0') -> weka.classifiers.functions.SimpleLogistic.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'W_HIDDEN_0'); ; weka.classifiers.functions.SimpleLogistic.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-A') -> weka.classifiers.functions.SimpleLogistic.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'W_HIDDEN_1'); ; initValueList(cn,'-W','0.0','1.0','0.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SimpleLogistic.cardinalConfig1(cn,hiddenList)
nC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'W_HIDDEN_1'); ; stopParamRefine(cn, '-W','0') -> weka.classifiers.functions.SimpleLogistic.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-W') -> weka.classifiers.functions.SimpleLogistic.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-W'); ; weka.classifiers.functions.SimpleLogistic.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-W'); ; noop
rS1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-W',paramList) -> weka.classifiers.functions.SimpleLogistic.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.SimpleLogistic; weka.classifiers.functions.SimpleLogistic.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.SMO
WCBCclass.weka.classifiers.functions.SMO; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.SMO',cn) -> weka.classifiers.functions.SMO:__construct(c) -> weka.classifiers.functions.SMO.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.SMO; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.SMO',cn) -> weka.classifiers.functions.SMO.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.SMO; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.SMO:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.SMO; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.SMO',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.SMO.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.SMO; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SMO.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.SMO; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMO.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.SMO; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SMO.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.SMO; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.SMO',cn); ; weka.classifiers.functions.SMO.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.SMO; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SMO',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.SMO; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SMO',cn) & !Stopped(cn); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.SMO; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMO.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.SMO; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.SMO',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMO.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '0') -> weka.classifiers.functions.SMO.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '1') -> weka.classifiers.functions.SMO.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '2') -> weka.classifiers.functions.SMO.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-M') -> weka.classifiers.functions.SMO.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.NormalizedPolyKernel') -> weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.PolyKernel') -> weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.Puk') -> weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.RBFKernel') -> weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.SMO.categoricalConfig4(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; weka.classifiers.functions.SMO.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.SMO.categoricalConfig5(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; weka.classifiers.functions.SMO.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatParam(paramList, '-END') -> weka.classifiers.functions.SMO.categoricalConfig6(cn,paramList,hiddenList)
cC6class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-C','0.5','1.5','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.SMO.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.SMO.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-S','0.1','10.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig4(cn,hiddenList)
nC3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-S','0') -> weka.classifiers.functions.SMO.cardinalConfig4(cn,hiddenList)
nC4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-O','0.1','1.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig5(cn,hiddenList)
nC4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-O','0') -> weka.classifiers.functions.SMO.cardinalConfig5(cn,hiddenList)
nC5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; initValueList(cn,'-G','1.0E-4','1.0','0.01','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMO.cardinalConfig6(cn,hiddenList)
nC5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'3_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; stopParamRefine(cn, '-G','0') -> weka.classifiers.functions.SMO.cardinalConfig6(cn,hiddenList)
nC6class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalConfig6(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-C') -> weka.classifiers.functions.SMO.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.SMO.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.SMO.cardinalRefine3(cn)
rC3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine3(cn); cn; ; ; refineCardinalParameter(cn,'-S') -> weka.classifiers.functions.SMO.cardinalRefine4(cn)
rC4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine4(cn); cn; ; ; refineCardinalParameter(cn,'-O') -> weka.classifiers.functions.SMO.cardinalRefine5(cn)
rC5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine5(cn); cn; ; ; refineCardinalParameter(cn,'-G') -> weka.classifiers.functions.SMO.cardinalRefine6(cn)
rC6class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefine6(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-C'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-C'); ; noop
tS1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped3(cn); cn; StoppedParam(cn,'-S'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped4(cn)
tS3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped3(cn); cn; !StoppedParam(cn,'-S'); ; noop
tS4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped4(cn); cn; StoppedParam(cn,'-O'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped5(cn)
tS4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped4(cn); cn; !StoppedParam(cn,'-O'); ; noop
tS5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped5(cn); cn; StoppedParam(cn,'-G'); ; weka.classifiers.functions.SMO.cardinalRefineTestStopped6(cn)
tS5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped5(cn); cn; !StoppedParam(cn,'-G'); ; noop
rS6class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalRefineTestStopped6(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-C',paramList) -> weka.classifiers.functions.SMO.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.SMO.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.SMO.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute3(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-S',paramList) -> weka.classifiers.functions.SMO.cardinalCompute4(cn,paramList)
cV4class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute4(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-O',paramList) -> weka.classifiers.functions.SMO.cardinalCompute5(cn,paramList)
cV5class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute5(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-G',paramList) -> weka.classifiers.functions.SMO.cardinalCompute6(cn,paramList)
cV6class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.cardinalCompute6(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.SMO; weka.classifiers.functions.SMO.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.SMOreg
WCBCclass.weka.classifiers.functions.SMOreg; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.SMOreg',cn) -> weka.classifiers.functions.SMOreg:__construct(c) -> weka.classifiers.functions.SMOreg.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.SMOreg; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.SMOreg',cn) -> weka.classifiers.functions.SMOreg.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.SMOreg; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.SMOreg:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.SMOreg; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.SMOreg',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.SMOreg.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.SMOreg; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SMOreg.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.SMOreg; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMOreg.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.SMOreg; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.SMOreg.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.SMOreg; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.SMOreg',cn); ; weka.classifiers.functions.SMOreg.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.SMOreg; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SMOreg',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.SMOreg; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.SMOreg',cn) & !Stopped(cn); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.SMOreg; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMOreg.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.SMOreg; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.SMOreg',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.SMOreg.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '0') -> weka.classifiers.functions.SMOreg.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '1') -> weka.classifiers.functions.SMOreg.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-N', '2') -> weka.classifiers.functions.SMOreg.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-I', 'weka.classifiers.functions.supportVector.RegSMOImproved') -> weka.classifiers.functions.SMOreg.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'2_REG_IGNORE_QUOTE_START_I_weka.classifiers.functions.supportVector.RegSMOImproved'); ; addOptParam(paramList, '-V') -> weka.classifiers.functions.SMOreg.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'2_REG_IGNORE_QUOTE_START_I_weka.classifiers.functions.supportVector.RegSMOImproved'); ; weka.classifiers.functions.SMOreg.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatParam(paramList, '-END') -> weka.classifiers.functions.SMOreg.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.NormalizedPolyKernel') -> weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.PolyKernel') -> weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.Puk') -> weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList)
cC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-K', 'weka.classifiers.functions.supportVector.RBFKernel') -> weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.SMOreg.categoricalConfig6(cn,paramList,hiddenList)
cC5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; weka.classifiers.functions.SMOreg.categoricalConfig6(cn,paramList,hiddenList)
cC6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; addOptParam(paramList, '-L') -> weka.classifiers.functions.SMOreg.categoricalConfig7(cn,paramList,hiddenList)
cC6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; weka.classifiers.functions.SMOreg.categoricalConfig7(cn,paramList,hiddenList)
cC7class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig7(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatParam(paramList, '-END') -> weka.classifiers.functions.SMOreg.categoricalConfig8(cn,paramList,hiddenList)
cC8class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.categoricalConfig8(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-C','0.5','1.5','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.NormalizedPolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.SMOreg.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.PolyKernel'); ; stopParamRefine(cn, '-E','0') -> weka.classifiers.functions.SMOreg.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-S','0.1','10.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig4(cn,hiddenList)
nC3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-S','0') -> weka.classifiers.functions.SMOreg.cardinalConfig4(cn,hiddenList)
nC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; initValueList(cn,'-O','0.1','1.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig5(cn,hiddenList)
nC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig4(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.Puk'); ; stopParamRefine(cn, '-O','0') -> weka.classifiers.functions.SMOreg.cardinalConfig5(cn,hiddenList)
nC5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; initValueList(cn,'-G','1.0E-4','1.0','0.01','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.functions.SMOreg.cardinalConfig6(cn,hiddenList)
nC5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig5(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'5_REG_IGNORE_QUOTE_START_K_weka.classifiers.functions.supportVector.RBFKernel'); ; stopParamRefine(cn, '-G','0') -> weka.classifiers.functions.SMOreg.cardinalConfig6(cn,hiddenList)
nC6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalConfig6(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-C') -> weka.classifiers.functions.SMOreg.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.SMOreg.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.SMOreg.cardinalRefine3(cn)
rC3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine3(cn); cn; ; ; refineCardinalParameter(cn,'-S') -> weka.classifiers.functions.SMOreg.cardinalRefine4(cn)
rC4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine4(cn); cn; ; ; refineCardinalParameter(cn,'-O') -> weka.classifiers.functions.SMOreg.cardinalRefine5(cn)
rC5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine5(cn); cn; ; ; refineCardinalParameter(cn,'-G') -> weka.classifiers.functions.SMOreg.cardinalRefine6(cn)
rC6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefine6(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-C'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-C'); ; noop
tS1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-E'); ; noop
tS3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped3(cn); cn; StoppedParam(cn,'-S'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped4(cn)
tS3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped3(cn); cn; !StoppedParam(cn,'-S'); ; noop
tS4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped4(cn); cn; StoppedParam(cn,'-O'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped5(cn)
tS4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped4(cn); cn; !StoppedParam(cn,'-O'); ; noop
tS5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped5(cn); cn; StoppedParam(cn,'-G'); ; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped6(cn)
tS5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped5(cn); cn; !StoppedParam(cn,'-G'); ; noop
rS6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalRefineTestStopped6(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-C',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute3(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-S',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute4(cn,paramList)
cV4class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute4(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-O',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute5(cn,paramList)
cV5class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute5(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-G',paramList) -> weka.classifiers.functions.SMOreg.cardinalCompute6(cn,paramList)
cV6class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.cardinalCompute6(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.SMOreg; weka.classifiers.functions.SMOreg.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.functions.VotedPerceptron
WCBCclass.weka.classifiers.functions.VotedPerceptron; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.functions.VotedPerceptron',cn) -> weka.classifiers.functions.VotedPerceptron:__construct(c) -> weka.classifiers.functions.VotedPerceptron.selectLocals0(cn)
WSBCclass.weka.classifiers.functions.VotedPerceptron; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.functions.VotedPerceptron',cn) -> weka.classifiers.functions.VotedPerceptron.selectLocals0(cn)
WFBCclass.weka.classifiers.functions.VotedPerceptron; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.functions.VotedPerceptron:setOptions(c,paramArray)
WIPLclass.weka.classifiers.functions.VotedPerceptron; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.functions.VotedPerceptron',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.functions.VotedPerceptron.initializeSubLists0(cn)
WSHPclass.weka.classifiers.functions.VotedPerceptron; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.VotedPerceptron.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.functions.VotedPerceptron; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.VotedPerceptron.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.functions.VotedPerceptron; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.functions.VotedPerceptron.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.functions.VotedPerceptron; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.functions.VotedPerceptron',cn); ; weka.classifiers.functions.VotedPerceptron.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.functions.VotedPerceptron; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.VotedPerceptron',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.functions.VotedPerceptron; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.functions.VotedPerceptron',cn) & !Stopped(cn); ; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.functions.VotedPerceptron; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.VotedPerceptron.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.functions.VotedPerceptron; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.functions.VotedPerceptron',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.functions.VotedPerceptron.combineLists0(cn,paramList)
sL0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','1.0','10.0','1.0','INTEGER','0','1',valueList) -> weka.classifiers.functions.VotedPerceptron.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','5000.0','50000.0','10000.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.functions.VotedPerceptron.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-E','0.2','5.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.functions.VotedPerceptron.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalConfig3(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.functions.VotedPerceptron.cardinalRefine1(cn)
rC1class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.functions.VotedPerceptron.cardinalRefine2(cn)
rC2class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-E') -> weka.classifiers.functions.VotedPerceptron.cardinalRefine3(cn)
rC3class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefine3(cn); cn; ; ; noop
tS0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-I'); ; noop
tS1class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-M'); ; noop
tS2class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-E'); ; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-E'); ; noop
rS3class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalRefineTestStopped3(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.functions.VotedPerceptron.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.functions.VotedPerceptron.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-E',paramList) -> weka.classifiers.functions.VotedPerceptron.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.cardinalCompute3(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.functions.VotedPerceptron; weka.classifiers.functions.VotedPerceptron.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.lazy.IBk
WCBCclass.weka.classifiers.lazy.IBk; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.lazy.IBk',cn) -> weka.classifiers.lazy.IBk:__construct(c) -> weka.classifiers.lazy.IBk.selectLocals0(cn)
WSBCclass.weka.classifiers.lazy.IBk; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.lazy.IBk',cn) -> weka.classifiers.lazy.IBk.selectLocals0(cn)
WFBCclass.weka.classifiers.lazy.IBk; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.lazy.IBk:setOptions(c,paramArray)
WIPLclass.weka.classifiers.lazy.IBk; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.lazy.IBk',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.lazy.IBk.initializeSubLists0(cn)
WSHPclass.weka.classifiers.lazy.IBk; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.IBk.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.lazy.IBk; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.IBk.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.lazy.IBk; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.IBk.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.lazy.IBk; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.lazy.IBk',cn); ; weka.classifiers.lazy.IBk.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.lazy.IBk; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.IBk',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.lazy.IBk; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.IBk',cn) & !Stopped(cn); ; weka.classifiers.lazy.IBk.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.lazy.IBk; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.IBk.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.lazy.IBk; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.lazy.IBk',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.IBk.combineLists0(cn,paramList)
sL0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-E') -> weka.classifiers.lazy.IBk.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-X') -> weka.classifiers.lazy.IBk.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'I_REMOVE_PREV'); ; addOptParam(paramList, '-F') -> weka.classifiers.lazy.IBk.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'I_REMOVE_PREV'); ; weka.classifiers.lazy.IBk.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-I') -> weka.classifiers.lazy.IBk.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-K','1.0','64.0','1.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.lazy.IBk.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-K') -> weka.classifiers.lazy.IBk.cardinalRefine1(cn)
rC1class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-K'); ; weka.classifiers.lazy.IBk.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-K'); ; noop
rS1class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-K',paramList) -> weka.classifiers.lazy.IBk.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.lazy.IBk; weka.classifiers.lazy.IBk.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.lazy.KStar
WCBCclass.weka.classifiers.lazy.KStar; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.lazy.KStar',cn) -> weka.classifiers.lazy.KStar:__construct(c) -> weka.classifiers.lazy.KStar.selectLocals0(cn)
WSBCclass.weka.classifiers.lazy.KStar; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.lazy.KStar',cn) -> weka.classifiers.lazy.KStar.selectLocals0(cn)
WFBCclass.weka.classifiers.lazy.KStar; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.lazy.KStar:setOptions(c,paramArray)
WIPLclass.weka.classifiers.lazy.KStar; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.lazy.KStar',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.lazy.KStar.initializeSubLists0(cn)
WSHPclass.weka.classifiers.lazy.KStar; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.KStar.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.lazy.KStar; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.KStar.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.lazy.KStar; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.KStar.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.lazy.KStar; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.lazy.KStar',cn); ; weka.classifiers.lazy.KStar.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.lazy.KStar; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.KStar',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.lazy.KStar; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.KStar',cn) & !Stopped(cn); ; weka.classifiers.lazy.KStar.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.lazy.KStar; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.KStar.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.lazy.KStar; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.lazy.KStar',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.KStar.combineLists0(cn,paramList)
sL0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-E') -> weka.classifiers.lazy.KStar.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-M', 'a') -> weka.classifiers.lazy.KStar.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-M', 'd') -> weka.classifiers.lazy.KStar.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-M', 'm') -> weka.classifiers.lazy.KStar.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-M', 'n') -> weka.classifiers.lazy.KStar.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-B','1.0','100.0','20.0','INTEGER','1','2',valueList) -> weka.classifiers.lazy.KStar.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-B') -> weka.classifiers.lazy.KStar.cardinalRefine1(cn)
rC1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-B'); ; weka.classifiers.lazy.KStar.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-B'); ; noop
rS1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-B',paramList) -> weka.classifiers.lazy.KStar.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.lazy.KStar; weka.classifiers.lazy.KStar.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.DecisionTable
WCBCclass.weka.classifiers.rules.DecisionTable; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.DecisionTable',cn) -> weka.classifiers.rules.DecisionTable:__construct(c) -> weka.classifiers.rules.DecisionTable.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.DecisionTable; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.DecisionTable',cn) -> weka.classifiers.rules.DecisionTable.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.DecisionTable; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.DecisionTable:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.DecisionTable; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.DecisionTable',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.DecisionTable.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.DecisionTable; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.DecisionTable.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.DecisionTable; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.DecisionTable.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.DecisionTable; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.DecisionTable.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.DecisionTable; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.DecisionTable',cn); ; weka.classifiers.rules.DecisionTable.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.DecisionTable; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.DecisionTable',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.DecisionTable; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.DecisionTable',cn) & !Stopped(cn); ; weka.classifiers.rules.DecisionTable.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.DecisionTable; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.DecisionTable.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.DecisionTable; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.DecisionTable',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.DecisionTable.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-E', 'acc') -> weka.classifiers.rules.DecisionTable.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-E', 'rmse') -> weka.classifiers.rules.DecisionTable.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-E', 'mae') -> weka.classifiers.rules.DecisionTable.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-E', 'auc') -> weka.classifiers.rules.DecisionTable.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-I') -> weka.classifiers.rules.DecisionTable.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', 'weka.attributeSelection.BestFirst') -> weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', 'weka.attributeSelection.GreedyStepwise') -> weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-X', '1') -> weka.classifiers.rules.DecisionTable.categoricalConfig4(cn,paramList,hiddenList)
cC3class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-X', '2') -> weka.classifiers.rules.DecisionTable.categoricalConfig4(cn,paramList,hiddenList)
cC3class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-X', '3') -> weka.classifiers.rules.DecisionTable.categoricalConfig4(cn,paramList,hiddenList)
cC3class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-X', '4') -> weka.classifiers.rules.DecisionTable.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.DecisionTable; weka.classifiers.rules.DecisionTable.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.JRip
WCBCclass.weka.classifiers.rules.JRip; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.JRip',cn) -> weka.classifiers.rules.JRip:__construct(c) -> weka.classifiers.rules.JRip.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.JRip; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.JRip',cn) -> weka.classifiers.rules.JRip.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.JRip; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.JRip:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.JRip; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.JRip',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.JRip.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.JRip; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.JRip.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.JRip; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.JRip.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.JRip; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.JRip.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.JRip; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.JRip',cn); ; weka.classifiers.rules.JRip.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.JRip; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.JRip',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.JRip; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.JRip',cn) & !Stopped(cn); ; weka.classifiers.rules.JRip.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.JRip; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.JRip.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.JRip; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.JRip',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.JRip.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-E') -> weka.classifiers.rules.JRip.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-P') -> weka.classifiers.rules.JRip.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-N','1.0','5.0','2.0','NUMERIC','0','3',valueList) -> weka.classifiers.rules.JRip.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-O','1.0','5.0','2.0','INTEGER','0','1',valueList) -> weka.classifiers.rules.JRip.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-N') -> weka.classifiers.rules.JRip.cardinalRefine1(cn)
rC1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-O') -> weka.classifiers.rules.JRip.cardinalRefine2(cn)
rC2class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-N'); ; weka.classifiers.rules.JRip.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-N'); ; noop
tS1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-O'); ; weka.classifiers.rules.JRip.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-O'); ; noop
rS2class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-N',paramList) -> weka.classifiers.rules.JRip.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-O',paramList) -> weka.classifiers.rules.JRip.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.JRip; weka.classifiers.rules.JRip.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.M5Rules
WCBCclass.weka.classifiers.rules.M5Rules; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.M5Rules',cn) -> weka.classifiers.rules.M5Rules:__construct(c) -> weka.classifiers.rules.M5Rules.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.M5Rules; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.M5Rules',cn) -> weka.classifiers.rules.M5Rules.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.M5Rules; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.M5Rules:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.M5Rules; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.M5Rules',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.M5Rules.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.M5Rules; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.M5Rules.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.M5Rules; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.M5Rules.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.M5Rules; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.M5Rules.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.M5Rules; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.M5Rules',cn); ; weka.classifiers.rules.M5Rules.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.M5Rules; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.M5Rules',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.M5Rules; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.M5Rules',cn) & !Stopped(cn); ; weka.classifiers.rules.M5Rules.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.M5Rules; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.M5Rules.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.M5Rules; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.M5Rules',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.M5Rules.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-N') -> weka.classifiers.rules.M5Rules.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-U') -> weka.classifiers.rules.M5Rules.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.classifiers.rules.M5Rules.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','4.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.rules.M5Rules.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.rules.M5Rules.cardinalRefine1(cn)
rC1class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.rules.M5Rules.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
rS1class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.rules.M5Rules.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.M5Rules; weka.classifiers.rules.M5Rules.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.OneR
WCBCclass.weka.classifiers.rules.OneR; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.OneR',cn) -> weka.classifiers.rules.OneR:__construct(c) -> weka.classifiers.rules.OneR.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.OneR; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.OneR',cn) -> weka.classifiers.rules.OneR.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.OneR; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.OneR:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.OneR; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.OneR',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.OneR.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.OneR; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.OneR.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.OneR; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.OneR.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.OneR; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.OneR.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.OneR; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.OneR',cn); ; weka.classifiers.rules.OneR.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.OneR; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.OneR',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.OneR; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.OneR',cn) & !Stopped(cn); ; weka.classifiers.rules.OneR.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.OneR; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.OneR.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.OneR; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.OneR',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.OneR.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-B','1.0','32.0','6.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.rules.OneR.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-B') -> weka.classifiers.rules.OneR.cardinalRefine1(cn)
rC1class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-B'); ; weka.classifiers.rules.OneR.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-B'); ; noop
rS1class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-B',paramList) -> weka.classifiers.rules.OneR.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.OneR; weka.classifiers.rules.OneR.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.PART
WCBCclass.weka.classifiers.rules.PART; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.PART',cn) -> weka.classifiers.rules.PART:__construct(c) -> weka.classifiers.rules.PART.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.PART; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.PART',cn) -> weka.classifiers.rules.PART.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.PART; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.PART:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.PART; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.PART',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.PART.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.PART; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.PART.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.PART; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.PART.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.PART; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.PART.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.PART; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.PART',cn); ; weka.classifiers.rules.PART.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.PART; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.PART',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.PART; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.PART',cn) & !Stopped(cn); ; weka.classifiers.rules.PART.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.PART; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.PART.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.PART; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.PART',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.PART.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.classifiers.rules.PART.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-B') -> weka.classifiers.rules.PART.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'R_REMOVED'); ; initValueList(cn,'-N','2.0','5.0','3.0','INTEGER','0','1',valueList) -> weka.classifiers.rules.PART.cardinalConfig1(cn,hiddenList)
nC0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'R_REMOVED'); ; stopParamRefine(cn, '-N','0') -> weka.classifiers.rules.PART.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','2.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.rules.PART.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-N') -> weka.classifiers.rules.PART.cardinalRefine1(cn)
rC1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.rules.PART.cardinalRefine2(cn)
rC2class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-N'); ; weka.classifiers.rules.PART.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-N'); ; noop
tS1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.rules.PART.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-M'); ; noop
rS2class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-N',paramList) -> weka.classifiers.rules.PART.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.rules.PART.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.PART; weka.classifiers.rules.PART.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.rules.ZeroR
WCBCclass.weka.classifiers.rules.ZeroR; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.rules.ZeroR',cn) -> weka.classifiers.rules.ZeroR:__construct(c) -> weka.classifiers.rules.ZeroR.selectLocals0(cn)
WSBCclass.weka.classifiers.rules.ZeroR; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.rules.ZeroR',cn) -> weka.classifiers.rules.ZeroR.selectLocals0(cn)
WFBCclass.weka.classifiers.rules.ZeroR; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.rules.ZeroR:setOptions(c,paramArray)
WIPLclass.weka.classifiers.rules.ZeroR; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.rules.ZeroR',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.rules.ZeroR.initializeSubLists0(cn)
WSHPclass.weka.classifiers.rules.ZeroR; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.ZeroR.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.rules.ZeroR; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.ZeroR.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.rules.ZeroR; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.rules.ZeroR.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.rules.ZeroR; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.rules.ZeroR',cn); ; weka.classifiers.rules.ZeroR.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.rules.ZeroR; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.ZeroR',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.rules.ZeroR; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.rules.ZeroR',cn) & !Stopped(cn); ; weka.classifiers.rules.ZeroR.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.rules.ZeroR; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.ZeroR.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.rules.ZeroR; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.rules.ZeroR',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.rules.ZeroR.combineLists0(cn,paramList)
sL0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.rules.ZeroR; weka.classifiers.rules.ZeroR.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.DecisionStump
WCBCclass.weka.classifiers.trees.DecisionStump; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.DecisionStump',cn) -> weka.classifiers.trees.DecisionStump:__construct(c) -> weka.classifiers.trees.DecisionStump.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.DecisionStump; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.DecisionStump',cn) -> weka.classifiers.trees.DecisionStump.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.DecisionStump; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.DecisionStump:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.DecisionStump; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.DecisionStump',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.DecisionStump.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.DecisionStump; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.DecisionStump.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.DecisionStump; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.DecisionStump.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.DecisionStump; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.DecisionStump.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.DecisionStump; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.DecisionStump',cn); ; weka.classifiers.trees.DecisionStump.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.DecisionStump; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.DecisionStump',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.DecisionStump; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.DecisionStump',cn) & !Stopped(cn); ; weka.classifiers.trees.DecisionStump.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.DecisionStump; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.DecisionStump.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.DecisionStump; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.DecisionStump',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.DecisionStump.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.DecisionStump; weka.classifiers.trees.DecisionStump.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.J48
WCBCclass.weka.classifiers.trees.J48; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.J48',cn) -> weka.classifiers.trees.J48:__construct(c) -> weka.classifiers.trees.J48.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.J48; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.J48',cn) -> weka.classifiers.trees.J48.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.J48; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.J48:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.J48; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.J48',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.J48.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.J48; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.J48.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.J48; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.J48.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.J48; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.J48.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.J48; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.J48',cn); ; weka.classifiers.trees.J48.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.J48; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.J48',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.J48; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.J48',cn) & !Stopped(cn); ; weka.classifiers.trees.J48.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.J48; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.J48.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.J48; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.J48',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.J48.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'C_HIDDEN_0') -> weka.classifiers.trees.J48.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'C_HIDDEN_1') -> weka.classifiers.trees.J48.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-O') -> weka.classifiers.trees.J48.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'S_REMOVE_PREV'); ; addOptParam(paramList, '-U') -> weka.classifiers.trees.J48.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'S_REMOVE_PREV'); ; weka.classifiers.trees.J48.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-B') -> weka.classifiers.trees.J48.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-J') -> weka.classifiers.trees.J48.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-A') -> weka.classifiers.trees.J48.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-S') -> weka.classifiers.trees.J48.categoricalConfig6(cn,paramList,hiddenList)
cC6class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','2.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.J48.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'C_HIDDEN_1'); ; initValueList(cn,'-C','0.0','1.0','0.25','NUMERIC','0','3',valueList) -> weka.classifiers.trees.J48.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'C_HIDDEN_1'); ; stopParamRefine(cn, '-C','0') -> weka.classifiers.trees.J48.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.trees.J48.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-C') -> weka.classifiers.trees.J48.cardinalRefine2(cn)
rC2class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.trees.J48.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
tS1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-C'); ; weka.classifiers.trees.J48.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-C'); ; noop
rS2class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.trees.J48.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-C',paramList) -> weka.classifiers.trees.J48.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.J48; weka.classifiers.trees.J48.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.LMT
WCBCclass.weka.classifiers.trees.LMT; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.LMT',cn) -> weka.classifiers.trees.LMT:__construct(c) -> weka.classifiers.trees.LMT.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.LMT; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.LMT',cn) -> weka.classifiers.trees.LMT.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.LMT; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.LMT:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.LMT; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.LMT',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.LMT.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.LMT; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.LMT.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.LMT; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.LMT.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.LMT; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.LMT.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.LMT; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.LMT',cn); ; weka.classifiers.trees.LMT.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.LMT; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.LMT',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.LMT; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.LMT',cn) & !Stopped(cn); ; weka.classifiers.trees.LMT.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.LMT; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.LMT.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.LMT; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.LMT',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.LMT.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'W_HIDDEN_0') -> weka.classifiers.trees.LMT.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'W_HIDDEN_1') -> weka.classifiers.trees.LMT.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-B') -> weka.classifiers.trees.LMT.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.classifiers.trees.LMT.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-C') -> weka.classifiers.trees.LMT.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-P') -> weka.classifiers.trees.LMT.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'W_HIDDEN_0'); ; addMandatValuedParam(paramList, '-W', '0') -> weka.classifiers.trees.LMT.categoricalConfig5(cn,paramList,hiddenList)
cC4class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'W_HIDDEN_0'); ; weka.classifiers.trees.LMT.categoricalConfig5(cn,paramList,hiddenList)
cC5class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig5(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-A') -> weka.classifiers.trees.LMT.categoricalConfig6(cn,paramList,hiddenList)
cC6class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.categoricalConfig6(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','15.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.LMT.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'W_HIDDEN_1'); ; initValueList(cn,'-W','0.0','1.0','0.0','NUMERIC','0','3',valueList) -> weka.classifiers.trees.LMT.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'W_HIDDEN_1'); ; stopParamRefine(cn, '-W','0') -> weka.classifiers.trees.LMT.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.trees.LMT.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-W') -> weka.classifiers.trees.LMT.cardinalRefine2(cn)
rC2class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.trees.LMT.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
tS1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-W'); ; weka.classifiers.trees.LMT.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-W'); ; noop
rS2class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.trees.LMT.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-W',paramList) -> weka.classifiers.trees.LMT.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.LMT; weka.classifiers.trees.LMT.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.M5P
WCBCclass.weka.classifiers.trees.M5P; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.M5P',cn) -> weka.classifiers.trees.M5P:__construct(c) -> weka.classifiers.trees.M5P.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.M5P; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.M5P',cn) -> weka.classifiers.trees.M5P.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.M5P; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.M5P:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.M5P; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.M5P',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.M5P.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.M5P; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.M5P.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.M5P; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.M5P.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.M5P; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.M5P.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.M5P; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.M5P',cn); ; weka.classifiers.trees.M5P.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.M5P; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.M5P',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.M5P; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.M5P',cn) & !Stopped(cn); ; weka.classifiers.trees.M5P.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.M5P; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.M5P.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.M5P; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.M5P',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.M5P.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-N') -> weka.classifiers.trees.M5P.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-U') -> weka.classifiers.trees.M5P.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-R') -> weka.classifiers.trees.M5P.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','4.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.M5P.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.trees.M5P.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.trees.M5P.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
rS1class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.trees.M5P.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.M5P; weka.classifiers.trees.M5P.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.RandomForest
WCBCclass.weka.classifiers.trees.RandomForest; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.RandomForest',cn) -> weka.classifiers.trees.RandomForest:__construct(c) -> weka.classifiers.trees.RandomForest.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.RandomForest; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.RandomForest',cn) -> weka.classifiers.trees.RandomForest.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.RandomForest; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.RandomForest:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.RandomForest; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.RandomForest',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.RandomForest.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.RandomForest; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.RandomForest.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.RandomForest; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomForest.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.RandomForest; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.RandomForest.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.RandomForest; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.RandomForest',cn); ; weka.classifiers.trees.RandomForest.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.RandomForest; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.RandomForest',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.RandomForest; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.RandomForest',cn) & !Stopped(cn); ; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.RandomForest; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomForest.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.RandomForest; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.RandomForest',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomForest.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'features_HIDDEN_0') -> weka.classifiers.trees.RandomForest.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'features_HIDDEN_1') -> weka.classifiers.trees.RandomForest.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_0') -> weka.classifiers.trees.RandomForest.hiddenConfig2(cn,hiddenList)
hC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_1') -> weka.classifiers.trees.RandomForest.hiddenConfig2(cn,hiddenList)
hC2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.hiddenConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'features_HIDDEN_0'); ; addMandatValuedParam(paramList, '-K', '0') -> weka.classifiers.trees.RandomForest.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'features_HIDDEN_0'); ; weka.classifiers.trees.RandomForest.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'depth_HIDDEN_0'); ; addMandatValuedParam(paramList, '-depth', '0') -> weka.classifiers.trees.RandomForest.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'depth_HIDDEN_0'); ; weka.classifiers.trees.RandomForest.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','256.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.RandomForest.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'features_HIDDEN_1'); ; initValueList(cn,'-K','1.0','32.0','2.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.RandomForest.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'features_HIDDEN_1'); ; stopParamRefine(cn, '-K','0') -> weka.classifiers.trees.RandomForest.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'depth_HIDDEN_1'); ; initValueList(cn,'-depth','1.0','20.0','2.0','INTEGER','1','2',valueList) -> weka.classifiers.trees.RandomForest.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'depth_HIDDEN_1'); ; stopParamRefine(cn, '-depth','0') -> weka.classifiers.trees.RandomForest.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalConfig3(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.trees.RandomForest.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-K') -> weka.classifiers.trees.RandomForest.cardinalRefine2(cn)
rC2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-depth') -> weka.classifiers.trees.RandomForest.cardinalRefine3(cn)
rC3class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefine3(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-I'); ; noop
tS1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-K'); ; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-K'); ; noop
tS2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-depth'); ; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-depth'); ; noop
rS3class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalRefineTestStopped3(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.trees.RandomForest.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-K',paramList) -> weka.classifiers.trees.RandomForest.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-depth',paramList) -> weka.classifiers.trees.RandomForest.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.cardinalCompute3(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.RandomForest; weka.classifiers.trees.RandomForest.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.RandomTree
WCBCclass.weka.classifiers.trees.RandomTree; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.RandomTree',cn) -> weka.classifiers.trees.RandomTree:__construct(c) -> weka.classifiers.trees.RandomTree.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.RandomTree; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.RandomTree',cn) -> weka.classifiers.trees.RandomTree.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.RandomTree; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.RandomTree:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.RandomTree; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.RandomTree',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.RandomTree.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.RandomTree; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.RandomTree.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.RandomTree; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomTree.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.RandomTree; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.RandomTree.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.RandomTree; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.RandomTree',cn); ; weka.classifiers.trees.RandomTree.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.RandomTree; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.RandomTree',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.RandomTree; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.RandomTree',cn) & !Stopped(cn); ; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.RandomTree; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomTree.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.RandomTree; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.RandomTree',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.RandomTree.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'features_HIDDEN_0') -> weka.classifiers.trees.RandomTree.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'features_HIDDEN_1') -> weka.classifiers.trees.RandomTree.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_0') -> weka.classifiers.trees.RandomTree.hiddenConfig2(cn,hiddenList)
hC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_1') -> weka.classifiers.trees.RandomTree.hiddenConfig2(cn,hiddenList)
hC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig2(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'back_HIDDEN_0') -> weka.classifiers.trees.RandomTree.hiddenConfig3(cn,hiddenList)
hC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig2(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'back_HIDDEN_1') -> weka.classifiers.trees.RandomTree.hiddenConfig3(cn,hiddenList)
hC3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.hiddenConfig3(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'features_HIDDEN_0'); ; addMandatValuedParam(paramList, '-K', '0') -> weka.classifiers.trees.RandomTree.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'features_HIDDEN_0'); ; weka.classifiers.trees.RandomTree.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'depth_HIDDEN_0'); ; addMandatValuedParam(paramList, '-depth', '0') -> weka.classifiers.trees.RandomTree.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'depth_HIDDEN_0'); ; weka.classifiers.trees.RandomTree.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'back_HIDDEN_0'); ; addMandatValuedParam(paramList, '-N', '0') -> weka.classifiers.trees.RandomTree.categoricalConfig3(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'back_HIDDEN_0'); ; weka.classifiers.trees.RandomTree.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-U') -> weka.classifiers.trees.RandomTree.categoricalConfig4(cn,paramList,hiddenList)
cC4class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.categoricalConfig4(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','1.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.RandomTree.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'features_HIDDEN_1'); ; initValueList(cn,'-K','2.0','32.0','2.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.RandomTree.cardinalConfig2(cn,hiddenList)
nC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'features_HIDDEN_1'); ; stopParamRefine(cn, '-K','0') -> weka.classifiers.trees.RandomTree.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'depth_HIDDEN_1'); ; initValueList(cn,'-depth','2.0','20.0','2.0','INTEGER','1','2',valueList) -> weka.classifiers.trees.RandomTree.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'depth_HIDDEN_1'); ; stopParamRefine(cn, '-depth','0') -> weka.classifiers.trees.RandomTree.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'back_HIDDEN_1'); ; initValueList(cn,'-N','2.0','5.0','3.0','INTEGER','0','1',valueList) -> weka.classifiers.trees.RandomTree.cardinalConfig4(cn,hiddenList)
nC3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig3(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'back_HIDDEN_1'); ; stopParamRefine(cn, '-N','0') -> weka.classifiers.trees.RandomTree.cardinalConfig4(cn,hiddenList)
nC4class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalConfig4(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.trees.RandomTree.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-K') -> weka.classifiers.trees.RandomTree.cardinalRefine2(cn)
rC2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-depth') -> weka.classifiers.trees.RandomTree.cardinalRefine3(cn)
rC3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefine3(cn); cn; ; ; refineCardinalParameter(cn,'-N') -> weka.classifiers.trees.RandomTree.cardinalRefine4(cn)
rC4class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefine4(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
tS1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-K'); ; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-K'); ; noop
tS2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-depth'); ; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-depth'); ; noop
tS3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped3(cn); cn; StoppedParam(cn,'-N'); ; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped4(cn)
tS3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped3(cn); cn; !StoppedParam(cn,'-N'); ; noop
rS4class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalRefineTestStopped4(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.trees.RandomTree.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-K',paramList) -> weka.classifiers.trees.RandomTree.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-depth',paramList) -> weka.classifiers.trees.RandomTree.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalCompute3(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-N',paramList) -> weka.classifiers.trees.RandomTree.cardinalCompute4(cn,paramList)
cV4class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.cardinalCompute4(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.RandomTree; weka.classifiers.trees.RandomTree.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.trees.REPTree
WCBCclass.weka.classifiers.trees.REPTree; wekaCreatePureBaseClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.trees.REPTree',cn) -> weka.classifiers.trees.REPTree:__construct(c) -> weka.classifiers.trees.REPTree.selectLocals0(cn)
WSBCclass.weka.classifiers.trees.REPTree; wekaSelectBaseClassifier(cn); cn; ; ; assignTo('weka.classifiers.trees.REPTree',cn) -> weka.classifiers.trees.REPTree.selectLocals0(cn)
WFBCclass.weka.classifiers.trees.REPTree; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.trees.REPTree:setOptions(c,paramArray)
WIPLclass.weka.classifiers.trees.REPTree; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.trees.REPTree',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.trees.REPTree.initializeSubLists0(cn)
WSHPclass.weka.classifiers.trees.REPTree; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.REPTree.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.trees.REPTree; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.REPTree.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.trees.REPTree; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.trees.REPTree.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.trees.REPTree; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.trees.REPTree',cn); ; weka.classifiers.trees.REPTree.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.trees.REPTree; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.REPTree',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.trees.REPTree; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.trees.REPTree',cn) & !Stopped(cn); ; weka.classifiers.trees.REPTree.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.trees.REPTree; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.REPTree.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.trees.REPTree; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.trees.REPTree',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.trees.REPTree.combineLists0(cn,paramList)
sL0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_0') -> weka.classifiers.trees.REPTree.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'depth_HIDDEN_1') -> weka.classifiers.trees.REPTree.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'depth_HIDDEN_0'); ; addMandatValuedParam(paramList, '-L', '-1') -> weka.classifiers.trees.REPTree.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'depth_HIDDEN_0'); ; weka.classifiers.trees.REPTree.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-P') -> weka.classifiers.trees.REPTree.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-M','1.0','64.0','2.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.trees.REPTree.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-V','1.0E-5','0.1','0.001','LOG_NUMERIC','0','3',valueList) -> weka.classifiers.trees.REPTree.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'depth_HIDDEN_1'); ; initValueList(cn,'-L','2.0','20.0','2.0','INTEGER','1','2',valueList) -> weka.classifiers.trees.REPTree.cardinalConfig3(cn,hiddenList)
nC2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalConfig2(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'depth_HIDDEN_1'); ; stopParamRefine(cn, '-L','0') -> weka.classifiers.trees.REPTree.cardinalConfig3(cn,hiddenList)
nC3class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalConfig3(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-M') -> weka.classifiers.trees.REPTree.cardinalRefine1(cn)
rC1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-V') -> weka.classifiers.trees.REPTree.cardinalRefine2(cn)
rC2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefine2(cn); cn; ; ; refineCardinalParameter(cn,'-L') -> weka.classifiers.trees.REPTree.cardinalRefine3(cn)
rC3class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefine3(cn); cn; ; ; noop
tS0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-M'); ; weka.classifiers.trees.REPTree.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-M'); ; noop
tS1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-V'); ; weka.classifiers.trees.REPTree.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-V'); ; noop
tS2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped2(cn); cn; StoppedParam(cn,'-L'); ; weka.classifiers.trees.REPTree.cardinalRefineTestStopped3(cn)
tS2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped2(cn); cn; !StoppedParam(cn,'-L'); ; noop
rS3class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalRefineTestStopped3(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-M',paramList) -> weka.classifiers.trees.REPTree.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-V',paramList) -> weka.classifiers.trees.REPTree.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalCompute2(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-L',paramList) -> weka.classifiers.trees.REPTree.cardinalCompute3(cn,paramList)
cV3class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.cardinalCompute3(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.trees.REPTree; weka.classifiers.trees.REPTree.combineLists0(cn,paramList); cn,paramList; ; ; noop

# META CLASSIFIER

# weka.classifiers.lazy.LWL
WCMCclass.weka.classifiers.lazy.LWL; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.lazy.LWL',cn) -> weka.classifiers.lazy.LWL:__construct(c) -> weka.classifiers.lazy.LWL.selectLocals0(cn)
WSMCclass.weka.classifiers.lazy.LWL; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.lazy.LWL',cn) -> weka.classifiers.lazy.LWL.selectLocals0(cn)
WFMCclass.weka.classifiers.lazy.LWL; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.lazy.LWL:setOptions(c,paramArray)
WIPLclass.weka.classifiers.lazy.LWL; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.lazy.LWL',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.lazy.LWL.initializeSubLists0(cn)
WSHPclass.weka.classifiers.lazy.LWL; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.LWL.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.lazy.LWL; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.lazy.LWL; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.lazy.LWL.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.lazy.LWL; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.lazy.LWL',cn); ; weka.classifiers.lazy.LWL.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.lazy.LWL; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.LWL',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.lazy.LWL; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.lazy.LWL',cn) & !Stopped(cn); ; weka.classifiers.lazy.LWL.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.lazy.LWL; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.LWL.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.lazy.LWL; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.lazy.LWL',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.lazy.LWL.combineLists0(cn,paramList)
sL0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'K_HIDDEN_0') -> weka.classifiers.lazy.LWL.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'K_HIDDEN_1') -> weka.classifiers.lazy.LWL.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'U_HIDDEN_0') -> weka.classifiers.lazy.LWL.hiddenConfig2(cn,hiddenList)
hC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'U_HIDDEN_1') -> weka.classifiers.lazy.LWL.hiddenConfig2(cn,hiddenList)
hC2class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.hiddenConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '-1') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '10') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '30') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '60') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '90') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_1'); ; addMandatValuedParam(paramList, '-K', '120') -> weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'K_HIDDEN_1'); ; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_0'); ; addMandatValuedParam(paramList, '-U', '0') -> weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_0'); ; addMandatValuedParam(paramList, '-U', '1') -> weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_0'); ; addMandatValuedParam(paramList, '-U', '2') -> weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_0'); ; addMandatValuedParam(paramList, '-U', '3') -> weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'K_HIDDEN_0'); ; addMandatValuedParam(paramList, '-U', '4') -> weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'K_HIDDEN_0'); ; weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-A', 'weka.core.neighboursearch.LinearNNSearch') -> weka.classifiers.lazy.LWL.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.lazy.LWL; weka.classifiers.lazy.LWL.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.AdaBoostM1
WCMCclass.weka.classifiers.meta.AdaBoostM1; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.AdaBoostM1',cn) -> weka.classifiers.meta.AdaBoostM1:__construct(c) -> weka.classifiers.meta.AdaBoostM1.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.AdaBoostM1; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.AdaBoostM1',cn) -> weka.classifiers.meta.AdaBoostM1.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.AdaBoostM1; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.AdaBoostM1:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.AdaBoostM1; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.AdaBoostM1',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.AdaBoostM1.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.AdaBoostM1; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AdaBoostM1.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.AdaBoostM1; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdaBoostM1.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.AdaBoostM1; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AdaBoostM1.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.AdaBoostM1; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.AdaBoostM1',cn); ; weka.classifiers.meta.AdaBoostM1.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.AdaBoostM1; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AdaBoostM1',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.AdaBoostM1; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AdaBoostM1',cn) & !Stopped(cn); ; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.AdaBoostM1; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdaBoostM1.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.AdaBoostM1; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.AdaBoostM1',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdaBoostM1.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'p_HIDDEN_0') -> weka.classifiers.meta.AdaBoostM1.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 'p_HIDDEN_1') -> weka.classifiers.meta.AdaBoostM1.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'p_HIDDEN_0'); ; addMandatValuedParam(paramList, '-P', '100') -> weka.classifiers.meta.AdaBoostM1.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'p_HIDDEN_0'); ; weka.classifiers.meta.AdaBoostM1.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addOptParam(paramList, '-Q') -> weka.classifiers.meta.AdaBoostM1.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.AdaBoostM1.categoricalConfig3(cn,paramList,hiddenList)
cC3class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.categoricalConfig3(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'p_HIDDEN_1'); ; initValueList(cn,'-P','50.0','100.0','100.0','INTEGER','1','2',valueList) -> weka.classifiers.meta.AdaBoostM1.cardinalConfig1(cn,hiddenList)
nC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'p_HIDDEN_1'); ; stopParamRefine(cn, '-P','0') -> weka.classifiers.meta.AdaBoostM1.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','128.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.meta.AdaBoostM1.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-P') -> weka.classifiers.meta.AdaBoostM1.cardinalRefine1(cn)
rC1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.meta.AdaBoostM1.cardinalRefine2(cn)
rC2class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-P'); ; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-P'); ; noop
tS1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-I'); ; noop
rS2class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-P',paramList) -> weka.classifiers.meta.AdaBoostM1.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.meta.AdaBoostM1.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.AdaBoostM1; weka.classifiers.meta.AdaBoostM1.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.AdditiveRegression
WCMCclass.weka.classifiers.meta.AdditiveRegression; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.AdditiveRegression',cn) -> weka.classifiers.meta.AdditiveRegression:__construct(c) -> weka.classifiers.meta.AdditiveRegression.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.AdditiveRegression; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.AdditiveRegression',cn) -> weka.classifiers.meta.AdditiveRegression.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.AdditiveRegression; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.AdditiveRegression:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.AdditiveRegression; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.AdditiveRegression',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.AdditiveRegression.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.AdditiveRegression; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AdditiveRegression.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.AdditiveRegression; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdditiveRegression.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.AdditiveRegression; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AdditiveRegression.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.AdditiveRegression; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.AdditiveRegression',cn); ; weka.classifiers.meta.AdditiveRegression.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.AdditiveRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AdditiveRegression',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.AdditiveRegression; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AdditiveRegression',cn) & !Stopped(cn); ; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.AdditiveRegression; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdditiveRegression.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.AdditiveRegression; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.AdditiveRegression',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AdditiveRegression.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 's_HIDDEN_0') -> weka.classifiers.meta.AdditiveRegression.hiddenConfig1(cn,hiddenList)
hC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; addMandatParam(hiddenList, 's_HIDDEN_1') -> weka.classifiers.meta.AdditiveRegression.hiddenConfig1(cn,hiddenList)
hC1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.hiddenConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'s_HIDDEN_0'); ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.AdditiveRegression.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'s_HIDDEN_0'); ; weka.classifiers.meta.AdditiveRegression.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; in(hiddenList,'s_HIDDEN_1'); ; initValueList(cn,'-S','0.0','1.0','1.0','NUMERIC','0','3',valueList) -> weka.classifiers.meta.AdditiveRegression.cardinalConfig1(cn,hiddenList)
nC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; !in(hiddenList,'s_HIDDEN_1'); ; stopParamRefine(cn, '-S','0') -> weka.classifiers.meta.AdditiveRegression.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','128.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.meta.AdditiveRegression.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-S') -> weka.classifiers.meta.AdditiveRegression.cardinalRefine1(cn)
rC1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.meta.AdditiveRegression.cardinalRefine2(cn)
rC2class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-S'); ; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-S'); ; noop
tS1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-I'); ; noop
rS2class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-S',paramList) -> weka.classifiers.meta.AdditiveRegression.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.meta.AdditiveRegression.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.AdditiveRegression; weka.classifiers.meta.AdditiveRegression.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.AttributeSelectedClassifier
WCMCclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.AttributeSelectedClassifier',cn) -> weka.classifiers.meta.AttributeSelectedClassifier:__construct(c) -> weka.classifiers.meta.AttributeSelectedClassifier.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.AttributeSelectedClassifier',cn) -> weka.classifiers.meta.AttributeSelectedClassifier.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.AttributeSelectedClassifier:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.AttributeSelectedClassifier.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AttributeSelectedClassifier.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.AttributeSelectedClassifier.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn); ; weka.classifiers.meta.AttributeSelectedClassifier.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.AttributeSelectedClassifier; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & !Stopped(cn); ; weka.classifiers.meta.AttributeSelectedClassifier.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AttributeSelectedClassifier.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.AttributeSelectedClassifier; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.AttributeSelectedClassifier',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.AttributeSelectedClassifier.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', 'weka.attributeSelection.BestFirst') -> weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', 'weka.attributeSelection.GreedyStepwise') -> weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-E', 'weka.attributeSelection.CfsSubsetEval') -> weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.AttributeSelectedClassifier; weka.classifiers.meta.AttributeSelectedClassifier.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.Bagging
WCMCclass.weka.classifiers.meta.Bagging; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.Bagging',cn) -> weka.classifiers.meta.Bagging:__construct(c) -> weka.classifiers.meta.Bagging.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.Bagging; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.Bagging',cn) -> weka.classifiers.meta.Bagging.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.Bagging; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.Bagging:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.Bagging; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.Bagging',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.Bagging.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.Bagging; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Bagging.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.Bagging; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Bagging.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.Bagging; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Bagging.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.Bagging; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.Bagging',cn); ; weka.classifiers.meta.Bagging.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.Bagging; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Bagging',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.Bagging; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Bagging',cn) & !Stopped(cn); ; weka.classifiers.meta.Bagging.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.Bagging; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Bagging.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.Bagging; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.Bagging',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Bagging.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.Bagging.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; in(hiddenList,'INT_P_100'); ; addOptParam(paramList, '-O') -> weka.classifiers.meta.Bagging.categoricalConfig2(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; !in(hiddenList,'INT_P_100'); ; weka.classifiers.meta.Bagging.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-P','10.0','100.0','100.0','INTEGER','1','2',valueList) -> weka.classifiers.meta.Bagging.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','128.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.meta.Bagging.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-P') -> weka.classifiers.meta.Bagging.cardinalRefine1(cn)
rC1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.meta.Bagging.cardinalRefine2(cn)
rC2class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-P'); ; weka.classifiers.meta.Bagging.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-P'); ; noop
tS1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.meta.Bagging.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-I'); ; noop
rS2class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-P',paramList) -> weka.classifiers.meta.Bagging.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.meta.Bagging.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.Bagging; weka.classifiers.meta.Bagging.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.RandomCommittee
WCMCclass.weka.classifiers.meta.RandomCommittee; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.RandomCommittee',cn) -> weka.classifiers.meta.RandomCommittee:__construct(c) -> weka.classifiers.meta.RandomCommittee.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.RandomCommittee; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.RandomCommittee',cn) -> weka.classifiers.meta.RandomCommittee.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.RandomCommittee; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.RandomCommittee:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.RandomCommittee; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.RandomCommittee',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.RandomCommittee.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.RandomCommittee; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.RandomCommittee.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.RandomCommittee; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomCommittee.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.RandomCommittee; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.RandomCommittee.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.RandomCommittee; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.RandomCommittee',cn); ; weka.classifiers.meta.RandomCommittee.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.RandomCommittee; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.RandomCommittee',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.RandomCommittee; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.RandomCommittee',cn) & !Stopped(cn); ; weka.classifiers.meta.RandomCommittee.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.RandomCommittee; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomCommittee.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.RandomCommittee; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.RandomCommittee',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomCommittee.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.RandomCommittee.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','64.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.meta.RandomCommittee.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalConfig1(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.meta.RandomCommittee.cardinalRefine1(cn)
rC1class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalRefine1(cn); cn; ; ; noop
tS0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.meta.RandomCommittee.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-I'); ; noop
rS1class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalRefineTestStopped1(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.meta.RandomCommittee.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.cardinalCompute1(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.RandomCommittee; weka.classifiers.meta.RandomCommittee.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.RandomSubSpace
WCMCclass.weka.classifiers.meta.RandomSubSpace; wekaCreatePureMetaClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.RandomSubSpace',cn) -> weka.classifiers.meta.RandomSubSpace:__construct(c) -> weka.classifiers.meta.RandomSubSpace.selectLocals0(cn)
WSMCclass.weka.classifiers.meta.RandomSubSpace; wekaSelectMetaClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.RandomSubSpace',cn) -> weka.classifiers.meta.RandomSubSpace.selectLocals0(cn)
WFMCclass.weka.classifiers.meta.RandomSubSpace; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.RandomSubSpace:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.RandomSubSpace; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.RandomSubSpace',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.RandomSubSpace.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.RandomSubSpace; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.RandomSubSpace.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.RandomSubSpace; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomSubSpace.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.RandomSubSpace; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.RandomSubSpace.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.RandomSubSpace; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.RandomSubSpace',cn); ; weka.classifiers.meta.RandomSubSpace.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.RandomSubSpace; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.RandomSubSpace',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.RandomSubSpace; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.RandomSubSpace',cn) & !Stopped(cn); ; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.RandomSubSpace; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomSubSpace.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.RandomSubSpace; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.RandomSubSpace',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.RandomSubSpace.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.RandomSubSpace.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalConfig0(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-I','2.0','64.0','10.0','LOG_INTEGER','0','3',valueList) -> weka.classifiers.meta.RandomSubSpace.cardinalConfig1(cn,hiddenList)
nC1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalConfig1(cn,hiddenList); cn,hiddenList,valueList; ; ; initValueList(cn,'-P','0.1','1.0','0.5','NUMERIC','0','3',valueList) -> weka.classifiers.meta.RandomSubSpace.cardinalConfig2(cn,hiddenList)
nC2class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalConfig2(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefine0(cn); cn; ; ; refineCardinalParameter(cn,'-I') -> weka.classifiers.meta.RandomSubSpace.cardinalRefine1(cn)
rC1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefine1(cn); cn; ; ; refineCardinalParameter(cn,'-P') -> weka.classifiers.meta.RandomSubSpace.cardinalRefine2(cn)
rC2class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefine2(cn); cn; ; ; noop
tS0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped0(cn); cn; StoppedParam(cn,'-I'); ; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped1(cn)
tS0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped0(cn); cn; !StoppedParam(cn,'-I'); ; noop
tS1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped1(cn); cn; StoppedParam(cn,'-P'); ; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped2(cn)
tS1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped1(cn); cn; !StoppedParam(cn,'-P'); ; noop
rS2class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalRefineTestStopped2(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalCompute0(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-I',paramList) -> weka.classifiers.meta.RandomSubSpace.cardinalCompute1(cn,paramList)
cV1class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalCompute1(cn,paramList); cn,paramList; ; ; setCardinalParameter(cn,'-P',paramList) -> weka.classifiers.meta.RandomSubSpace.cardinalCompute2(cn,paramList)
cV2class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.cardinalCompute2(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.RandomSubSpace; weka.classifiers.meta.RandomSubSpace.combineLists0(cn,paramList); cn,paramList; ; ; noop

# ENSEMBLE CLASSIFIER

# weka.classifiers.meta.Stacking
WCECclass.weka.classifiers.meta.Stacking; wekaCreatePureEnsembleClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.Stacking',cn) -> weka.classifiers.meta.Stacking:__construct(c) -> weka.classifiers.meta.Stacking.selectLocals0(cn)
WSECclass.weka.classifiers.meta.Stacking; wekaSelectEnsembleClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.Stacking',cn) -> weka.classifiers.meta.Stacking.selectLocals0(cn)
WFPCclass.weka.classifiers.meta.Stacking; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.Stacking:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.Stacking; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.Stacking',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.Stacking.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.Stacking; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Stacking.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.Stacking; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Stacking.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.Stacking; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Stacking.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.Stacking; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.Stacking',cn); ; weka.classifiers.meta.Stacking.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.Stacking; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Stacking',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.Stacking; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Stacking',cn) & !Stopped(cn); ; weka.classifiers.meta.Stacking.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.Stacking; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Stacking.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.Stacking; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.Stacking',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Stacking.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-X', '10') -> weka.classifiers.meta.Stacking.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.Stacking.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.Stacking; weka.classifiers.meta.Stacking.combineLists0(cn,paramList); cn,paramList; ; ; noop
# weka.classifiers.meta.Vote
WCECclass.weka.classifiers.meta.Vote; wekaCreatePureEnsembleClassifier(cn,c); cn,c; ; ; assignTo('weka.classifiers.meta.Vote',cn) -> weka.classifiers.meta.Vote:__construct(c) -> weka.classifiers.meta.Vote.selectLocals0(cn)
WSECclass.weka.classifiers.meta.Vote; wekaSelectEnsembleClassifier(cn); cn; ; ; assignTo('weka.classifiers.meta.Vote',cn) -> weka.classifiers.meta.Vote.selectLocals0(cn)
WFPCclass.weka.classifiers.meta.Vote; wekaFinalizeClassifier(cn,c); cn,c,paramList,paramArray; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',paramList,'visible'); ; compileOptionListToArray(paramList,paramArray) -> weka.classifiers.meta.Vote:setOptions(c,paramArray)
WIPLclass.weka.classifiers.meta.Vote; wekaInitializeNumParameterLists(cn,i); cn,i,paramList,hiddenList; assigned('weka.classifiers.meta.Vote',cn); ; getOptionList(cn,i,'hidden',hiddenList) -> getOptionList(cn,i,'visible',paramList) -> weka.classifiers.meta.Vote.initializeSubLists0(cn)
WSHPclass.weka.classifiers.meta.Vote; wekaSetHiddenParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Vote.hiddenConfig0(cn,hiddenList)
WSCPclass.weka.classifiers.meta.Vote; wekaSetCategoricalParameters(cn); cn,paramList,hiddenList; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',hiddenList,'hidden') & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList)
WICPclass.weka.classifiers.meta.Vote; wekaInitializeCardinalParameters(cn); cn,hiddenList; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',hiddenList,'hidden'); ; weka.classifiers.meta.Vote.cardinalConfig0(cn,hiddenList) -> setActive(cn)
WSRCPclass.weka.classifiers.meta.Vote; wekaSingleRefineCardinalParameters(cn); cn; assigned('weka.classifiers.meta.Vote',cn); ; weka.classifiers.meta.Vote.cardinalRefine0(cn) -> wekaRefineCardinalParametersTestStopped(cn)
WRCPT1Sclass.weka.classifiers.meta.Vote; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Vote',cn) & Stopped(cn); ; noop
WRCPTS2class.weka.classifiers.meta.Vote; wekaRefineCardinalParametersTestStopped(cn); cn; assigned('weka.classifiers.meta.Vote',cn) & !Stopped(cn); ; weka.classifiers.meta.Vote.cardinalRefineTestStopped0(cn)
WCCVclass.weka.classifiers.meta.Vote; wekaSetCardinalParameters(cn); cn,paramList; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Vote.cardinalCompute0(cn,paramList)
WCPLclass.weka.classifiers.meta.Vote; wekaCombineParameterLists(cn); cn,paramList; assigned('weka.classifiers.meta.Vote',cn) & ListContext(cn,'0',paramList,'visible'); ; weka.classifiers.meta.Vote.combineLists0(cn,paramList)
sL0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.selectLocals0(cn); cn; ; ; noop
iS0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.initializeSubLists0(cn); cn; ; ; noop
hC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.hiddenConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
cC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-R', 'AVG') -> weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-R', 'PROD') -> weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-R', 'MAJ') -> weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-R', 'MIN') -> weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList)
cC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig0(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-R', 'MAX') -> weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList)
cC1class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig1(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; addMandatValuedParam(paramList, '-S', '1') -> weka.classifiers.meta.Vote.categoricalConfig2(cn,paramList,hiddenList)
cC2class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.categoricalConfig2(cn,paramList,hiddenList); cn,paramList,hiddenList; ; ; noop
nC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.cardinalConfig0(cn,hiddenList); cn,hiddenList; ; ; noop
rC0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.cardinalRefine0(cn); cn; ; ; noop
rS0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.cardinalRefineTestStopped0(cn); cn; ; ; setStopped(cn)
cV0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.cardinalCompute0(cn,paramList); cn,paramList; ; ; noop
cL0class.weka.classifiers.meta.Vote; weka.classifiers.meta.Vote.combineLists0(cn,paramList); cn,paramList; ; ; noop




[Rules]

# Facts
# put simply literals here (all parameters are interpreted as constants)

Thing(null)


Predecessor(1,0)
Predecessor(2,1)
Predecessor(3,2)
Predecessor(4,3)
Predecessor(5,4)
Predecessor(6,5)
Predecessor(7,6)
Predecessor(8,7)
Predecessor(9,8)
Predecessor(10,9)
Predecessor(11,10)
Predecessor(12,11)
Predecessor(13,12)
Predecessor(14,13)
Predecessor(15,14)
Predecessor(16,15)
Predecessor(17,16)
Predecessor(18,17)
Predecessor(19,18)
Predecessor(20,19)


Refinement(-5)
Refinement(-4)
Refinement(-3)
Refinement(-2)
Refinement(-1)
Refinement(0)
Refinement(1)
Refinement(2)
Refinement(3)
Refinement(4)






[Queries]

q1; x:Instances; ; Instances(x); induce(x); (1000)




